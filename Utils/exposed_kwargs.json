[
  {
    "file": "pyPLUTO/plot.py",
    "class": "PlotManager",
    "method": "plot",
    "args": {
      "x": false,
      "y": false,
      "check": false
    },
    "kwargs": {
      "legspace": false,
      "figsize": false,
      "lw": false,
      "c": false,
      "grid": false,
      "alpha": false,
      "yscale": false,
      "tight": false,
      "mscale": false,
      "ytickslabels": false,
      "yrange": false,
      "proj": false,
      "xtickslabels": false,
      "ms": false,
      "tickssize": false,
      "label": false,
      "legpos": false,
      "sharey": false,
      "suptitle": false,
      "legcols": false,
      "xrange": false,
      "shareaxisy": false,
      "legsize": false,
      "check": false,
      "xtresh": false,
      "ax": false,
      "sharex": false,
      "fontsize": false,
      "edgecolor": false,
      "legalpha": false,
      "yticks": false,
      "minorticks": false,
      "ytresh": false,
      "xtitle": false,
      "fillstyle": false,
      "title": false,
      "xscale": false,
      "xticks": false,
      "ytitle": false,
      "shareaxisx": false,
      "ls": false,
      "marker": false,
      "ticksdir": false,
      "legpad": false,
      "titlepad": false,
      "aspect": false,
      "titlesize": false,
      "labelsize": false
    },
    "docstring": "Creation of a 1D function plot (or a 1D slice plot). It creates a\nsimple figure and a single axis if none are given prior. If a single\nfunction argument is given, it plots the graph of that function using\na linear variable as x parameter. However, if a pair of arrays is\nprovided, it plots the second as a function of the first one.\n\nReturns\n-------\n- None\n\nParameters\n----------\n- alpha: float, default 1.0\n    Sets the opacity of the plot, where 1.0 means total opaque and 0.0\n    means total transparent.\n- aspect: 'auto' | 'equal' | float, default 'auto'\n    Sets the aspect ratio of the plot.\n    The 'auto' keyword is the default option (most likely the plot will\n    be squared). The 'equal' keyword will set the same scaling for x and\n    y. A float will fix the ratio between the y-scale and the x-scale\n    (1.0 is the same as 'equal').\n- ax: ax | int | None, default None\n    The axis where to plot the lines. If None, a new axis is created or\n    the last axis is selected.\n- bottom: float, default 0.1\n    The space from the bottom border to the last row of plots.\n- c: str, default self.color\n    Determines the line color. If not defined, the program will loop\n    over an array of 10 color which are different for the most common\n    vision deficiencies.\n- figsize: [float, float], default [8,5]\n    Sets the figure size. The default value is computed from the number\n    of rows and columns.\n- fillstyle: {'full', 'left', 'right', 'bottom', 'top', 'none'},\n    default 'full'\n    Sets the marker filling. The default value is the fully filled\n    marker ('full').\n- fontsize: float, default 17.0\n    Sets the fontsize for all the axes.\n- grid: bool, default False\n    If enabled, creates a grid on the plot.\n- label: str, default None\n    Associates a label to each line. Such labels will be used for the\n    creation of the legend.\n- labelsize: float, default fontsize\n    Sets the labels font\u00fesize (which is the same for both labels).\n    The default value corresponds to the value of the keyword\n    'fontsize'.\n- legalpha: float, default 0.8\n    Sets the opacity of the legend.\n- left: float, default 0.125\n    The space from the left border to the leftmost column of plots.\n- legcols: int, default 1\n    Sets the number of columns that the legend should have.\n- legpad: float, default 0.8\n    Sets the space between the lines (or symbols) and the correspondibg\n    text in the legend.\n- legpos: int | str, default None\n    If enabled, creates a legend. This keyword selects the legend\n    location.\n- legsize: float, default fontsize\n    Sets the fontsize of the legend. The default value is the default\n    fontsize value.\n- legspace: float, default 2\n    Sets the space between the legend columns, in font-size units.\n- ls: {'-', '--', '-.', ':', ' ', ect.}, default '-'\n    Sets the linestyle. The choices available are the ones defined in\n    the matplotlib package. Here are reported the most common ones.\n- lw: float, default 1.3\n    Sets the linewidth of each line.\n- marker: {'o', 'v', '^', '<', '>', 'X', ' ', etc.}, default ' '\n    Sets an optional symbol for every point. The default value is no\n    marker (' ').\n- minorticks: str, default None\n    If not None enables the minor ticks on the plot (for both grid\n    axes).\n- ms: float, default 3\n    Sets the marker size.\n- mscale: fload, default 1.0\n    Sets the marker size scale in the legend.\n- proj: str, default None\n    Custom projection for the plot (e.g. 3D). Recommended only if\n    needed. This keyword should be used only if the axis is created.\n    WARNING: pyPLUTO does not support 3D plotting for now, only 3D axes.\n    The 3D plot feature will be available in future releases.\n- right: float, default 0.9\n    The space from the right border to the rightmost column of plots.\n- ticksdir: {'in', 'out'}, default 'in'\n    Sets the ticks direction. The default option is 'in'.\n- tickssize: float, default fontsize\n    Sets the ticks fontsize (which is the same for both grid axes).\n    The default value corresponds to the value of the keyword\n    'fontsize'.\n- title: str, default None\n    Places the title of the plot on top of it.\n- titlesize: float, default fontsize\n    Sets the title fontsize. The default value corresponds to the value\n    of the keyword 'fontsize'.\n- top: float, default 0.9\n    The space from the top border to the first row of plots.\n- x (not optional): 1D array\n    This is the x-axis variable. If y is not defined, then this becomes\n    the y-axis variable.\n- xrange: [float, float], default 'Default'\n    Sets the range in the x-direction. If not defined or set to\n    'Default', the code will compute the range while plotting the data\n    by taking the minimum and the maximum values of the x-array. In case\n    of multiple lines, the code will also adapt to the previous ranges.\n- xscale: {'linear','log'}, default 'linear'\n    If enabled (and different from default), sets automatically the\n    scale on the x-axis. Data in log scale should be used with the\n    keyword 'log', while data in linear scale should be used with the\n    keyword 'linear'.\n- xticks: [float] | None | bool, default True\n    If enabled (and different from True), sets manually ticks on\n    x-axis. In order to completely remove the ticks the keyword should\n    be used with None.\n- xtickslabels: [str] | None | bool, default True\n    If enabled (and different from True), sets manually the ticks\n    labels on the x-axis. In order to completely remove the ticks the\n    keyword should be used with None. Note that fixed tickslabels should\n    always correspond to fixed ticks.\n- xtitle: str, default None\n    Sets and places the label of the x-axis.\n- y: 1D array, default [None]\n    The y-axis variable.\n- yrange: [float, float], default 'Default'\n    Sets the range in the y-direction. If not defined or set to\n    'Default' the code will compute the range while plotting the data by\n    taking the minimum and the maximum values of the y-array. In case of\n    multiple lines, the code will also adapt to the previous ranges. It\n    also adds a small offset.\n- yscale: {'linear','log'}, default 'linear'\n    If enabled (and different from True), sets automatically the scale\n    on the y-axis. Data in log scale should be used with the keyword\n    'log', while data in linear scale should be used with the keyword\n    'linear'.\n- yticks: [float] | None | bool, default True\n    If enabled (and different from True), sets manually ticks on\n    y-axis. In order to completely remove the ticks the keyword should\n    be used with None.\n- ytickslabels: [str] | None | bool, default True\n    If enabled (and different from True), sets manually the ticks\n    labels on the y-axis. In order to completely remove the ticks the\n    keyword should be used with None. Note that fixed tickslabels should\n    always correspond to fixed ticks.\n- ytitle: str, default None\n    Sets and places the label of the y-axis.\n\n----\n\nExamples\n--------\n- Example #1: create a simple plot of y as function of x\n\n    >>> import pyPLUTO as pp\n    >>> I = pp.Image()\n    >>> I.plot(x, y)\n\n- Example #2: create a plot of y as function of x with custom range of\n    the axes and titles\n\n    >>> import pyPLUTO as pp\n    >>> I = pp.Image()\n    >>> I.plot(x, y, xrange = [0,100], yrange = [0.0,1.0],\n        title = 'y in function of x', xtitle = 'x', ytitle = 'y')\n\n- Example #3: create a plot with logarithmic scale on y-axis\n\n    >>> import pyPLUTO as pp\n    >>> I = pp.Image()\n    >>> I.plot(x, y, yscale=\"log\")\n\n- Example #4: create a plot with a legend and custom ticks on x-axis\n\n    >>> import pyPLUTO as pp\n    >>> I = pp.Image()\n    >>> I.plot(x, y, label = 'y', legpos = 'lower right',\n        xticks = [0.2,0.4,0.6,0.8])\n\n- Example #5: create plots on already existing axes\n\n    >>> import pypLUTO as pp\n    >>> I = pp.Image()\n    >>> I.create_axes(ncol=2)\n    >>> I.plot(x, y, ax=I.ax[0])\n    >>> I.plot(x, y * y, ax=I.ax[1])\n    >>> I.plot(x, z, ax=I.ax[0])"
  },
  {
    "file": "pyPLUTO/colorbar.py",
    "class": "ColorbarManager",
    "method": "colorbar",
    "args": {
      "pcm": false,
      "axs": false,
      "cax": false,
      "check": false
    },
    "kwargs": {
      "fontsize": false,
      "extend": false,
      "cticks": false,
      "figsize": false,
      "sharey": false,
      "suptitle": false,
      "ctickslabels": false,
      "tight": false,
      "cpad": false,
      "clabel": false,
      "sharex": false,
      "check": false,
      "extendrect": false,
      "proj": false,
      "cpos": false
    },
    "docstring": "Method to display a colorbar in a selected position. If the\nkeyword cax is enabled the colorbar is located in a specific\naxis, otherwise an axis will be shrunk in order to place the\ncolorbar.\n\nReturns\n-------\n- None\n\nParameters\n----------\n- axs: axis object, default None\n    The axes where the display that will be used for the colorbar is\n    located. If None, the last considered axis will be used.\n- cax: axis object, default None\n    The axes where the colorbar should be placed. If None, the colorbar\n    will be placed next to the axis axs.\n- clabel: str, default None\n    Sets the label of the colorbar.\n- cpad: float, default 0.07\n    Fraction of original axes between colorbar and the axes (in case cax\n    is not defined).\n- cpos: {'top','bottom','left','right'}, default 'right'\n    Sets the position of the colorbar.\n- cticks: {[float], None}, default None\n    If enabled (and different from None), sets manually ticks on the\n    colorbar.\n- ctickslabels: str, default None\n    If enabled, sets manually ticks labels on the colorbar.\n- extend: {'neither','both','min','max'}, default 'neither'\n    Sets the extension of the triangular colorbar extension.\n- extendrect: bool, default False\n    If True, the colorbar extension will be rectangular.\n- pcm: QuadMesh | PathCollection | None, default None\n    The collection to be used for the colorbar. If None, the axs will be\n    used. If both pcm and axs are not None, pcm will be used.\n\n----\n\nExamples\n--------\n- Example #1: create a standard colorbar on the right\n\n    >>> import pyPLUTO as pp\n    >>> I = pp.Image()\n    >>> I.display(var)\n    >>> I.colorbar()\n\n- Example #2: create a colorbar in a different axis\n\n    >>> import pyPLUTO as pp\n    >>> I = pp.Image()\n    >>> ax = I.create_axes(ncol=2)\n    >>> I.display(var, ax=ax[0])\n    >>> I.colorbar(axs=ax[0], cax=ax[1])\n\n- Example #3: create a set of 3 displays with a colorbar on the bottom.\n    Another colorbar is shown on the right of the topmost display\n\n    >>> import pyPLUTO as pp\n    >>> I = pp.Image()\n    >>> ax = I.create_axes(nrow=4)\n    >>> I.display(var1, ax=ax[0])\n    >>> I.colorbar(axs=ax[0])\n    >>> I.display(var2, ax=ax[1])\n    >>> I.display(var3, ax=ax[2])\n    >>> I.colorbar(axs=ax[2], cax=ax[3])"
  },
  {
    "file": "pyPLUTO/legend.py",
    "class": "LegendManager",
    "method": "legend",
    "args": {
      "ax": false,
      "check": false,
      "fromplot": false
    },
    "kwargs": {
      "legspace": false,
      "fontsize": false,
      "edgecolor": false,
      "legalpha": false,
      "c": false,
      "lw": false,
      "figsize": false,
      "tight": false,
      "mscale": false,
      "fillstyle": false,
      "proj": false,
      "ms": false,
      "label": false,
      "legpos": false,
      "ls": false,
      "marker": false,
      "legcols": false,
      "sharey": false,
      "suptitle": false,
      "legpad": false,
      "legsize": false,
      "check": false,
      "sharex": false
    },
    "docstring": "Creation of a legend referring to the current figure.\nIf no labels are given, it shows the labels of all the plots in the\nfigure, ordered by entry. If specific labels are given, it shows those\nones.\n\nReturns\n-------\n- None\n\nParameters\n----------\n- ax: ax | int | None, default None\n    The axis where to insert the legend. If None, the last considered\n    axis will be used.\n- c: str, default self.color\n    Determines the line color. If not defined, the program will loop\n    over an array of 6 color which are different for the most common\n    vision deficiencies.\n- edgecolor: list[str], default [None]\n    Sets the edge color of the legend. The default value is black ('k').\n- fillstyle: {'full', 'left', 'right', 'bottom', 'top', 'none'},\n    default 'full'\n    Sets the marker filling. The default value is the fully filled\n    marker ('full').\n- label: [str], default None\n    Associates a label to each line. If not specified, the program will\n    take the label which are already associated with the plot.\n- legalpha: float, default 0.8\n    Sets the opacity of the legend.\n- legcols: int, default 1\n    Sets the number of columns that the legend should have.\n- legpad: float, default 0.8\n    Sets the space between the lines (or symbols) and the correspondibg\n    text in the legend.\n- legpos: int | str, default 0\n    Selects the legend location. If not specified the standard\n    matplotlib legend function will find the most suitable location.\n- legsize: float, default fontsize\n    Sets the fontsize of the legend. The default value is the default\n    fontsize value.\n- legspace: float, default 2\n    Sets the space between the legend columns, in font-size units.\n- ls: {'-', '--', '-.', ':', ' ', ect.}, default '-'\n    Sets the linestyle. The choices available are the ones defined in\n    the matplotlib package. Here are reported the most common ones.\n- lw: float, default 1.3\n    Sets the linewidth of each line.\n- marker: {'o', 'v', '^', '<', '>', 'X', ' ', etc.}, default ' '\n    Sets an optional symbol for every point. The default value is no\n    marker (' ').\n- ms: float, default 5 (if label) or 1 (if not label)\n    Sets the marker size from the default value of 5.0 (if label is\n    given) or the marker scale from the default value of 1.0 (if not\n    label).\n- mscale: float, default 1.0\n    Sets the marker scale. The default value is 1.0.\n\n----\n\nExamples\n--------\n- Example #1: create a standard legend\n\n    >>> import pyPLUTO as pp\n    >>> I = pp.Image()\n    >>> ax = I.create_axes()\n    >>> I.plot(x, y, ax=ax, label=\"label\")\n    >>> I.legend(ax)\n\n- Example #2: create a legend with custom labels\n\n    >>> import pyPLUTO as pp\n    >>> I = pp.Image()\n    >>> I.plot(x, y)\n    >>> I.legend(label=\"y\")\n\n- Example #3: create a double legend for four lines in a single plot\n\n    >>> import pyPLUTO as pp\n    >>> I = pp.Image()\n    >>> I.plot(x, y1, ls=\"-\", c=\"k\")\n    >>> I.plot(x, y2, ls=\"-.\", c=\"r\")\n    >>> I.plot(x, y3, ls=\"-\", c=\"r\")\n    >>> I.plot(x, y4, ls=\"-.\", c=\"k\")\n    >>> I.legend(\n    ...     legpos=\"lower left\",\n    ...     ls=[\"-\", \"-\"],\n    ...     c=[\"k\", \"r\"],\n    ...     label=[\"black lines\", \"red lines\"],\n    ... )\n    >>> I.legend(\n    ...     legpos=\"lower right\",\n    ...     ls=[\"-\", \"-.\"],\n    ...     c=[\"k\", \"k\"],\n    ...     label=[\"continue\", \"dotted\"],\n    ... )\n    >>> pp.show()"
  },
  {
    "file": "pyPLUTO/interactive.py",
    "class": "InteractiveManager",
    "method": "animate",
    "args": {
      "gifname": false,
      "frames": false,
      "interval": false,
      "updateslider": false
    },
    "kwargs": {},
    "docstring": "Displays the animation interactively.\n\nReturns\n-------\n- None\n\nParameters\n----------\n- frames: int, default None\n    The number of frames in the animation.\n- gifname: str, default None\n    The name of the GIF file.\n- interval: int, default 500\n    The interval between frames in milliseconds.\n- updateslider: bool, default True\n    If True, the slider is shown and updated with each frame.\n\nExamples\n--------\n- Example #1: Display the animation\n\n        >>> animate()\n\n- Example #2: Display the animation with a specific number of frames\n\n        >>> animate(frames=[0, 1, 2], interval=300)"
  },
  {
    "file": "pyPLUTO/interactive.py",
    "class": "InteractiveManager",
    "method": "interactive",
    "args": {
      "varx": false,
      "vary": false,
      "check": false,
      "limfix": false,
      "labslider": false
    },
    "kwargs": {
      "legspace": false,
      "extend": false,
      "figsize": false,
      "grid": false,
      "lw": false,
      "c": false,
      "x2": false,
      "alpha": false,
      "yscale": false,
      "tight": false,
      "cpad": false,
      "mscale": false,
      "ytickslabels": false,
      "vmin": false,
      "yrange": false,
      "lint": false,
      "proj": false,
      "tresh": false,
      "xtickslabels": false,
      "ms": false,
      "tickssize": false,
      "cticks": false,
      "label": false,
      "legpos": false,
      "sharey": false,
      "suptitle": false,
      "legcols": false,
      "xrange": false,
      "transpose": false,
      "clabel": false,
      "shareaxisy": false,
      "legsize": false,
      "check": false,
      "extendrect": false,
      "xtresh": false,
      "shading": false,
      "ax": false,
      "sharex": false,
      "cpos": false,
      "fontsize": false,
      "edgecolor": false,
      "legalpha": false,
      "yticks": false,
      "cscale": false,
      "minorticks": false,
      "ytresh": false,
      "vmax": false,
      "xtitle": false,
      "fillstyle": false,
      "title": false,
      "xscale": false,
      "xticks": false,
      "ytitle": false,
      "shareaxisx": false,
      "ls": false,
      "ticksdir": false,
      "marker": false,
      "ctickslabels": false,
      "legpad": false,
      "titlepad": false,
      "aspect": false,
      "x1": false,
      "cmap": false,
      "titlesize": false,
      "labelsize": false
    },
    "docstring": "Creates an interactive plot with a slider to change the data.\nWarning: it works only with the fluid variables.\n\nReturns\n-------\n- None\n\nParameters\n----------\n- varx (not optional): array_like\n    The x-axis variable.\n- vary: array_like, default None\n    The y-axis variable.\n- ax: Axes, default None\n    The axes instance.\n- labslider: str, default None\n    The label of the slider.\n- limfix: bool, default True\n    If True, the colorbar limits are fixed through the entire animation.\n- **kwargs: Any\n    Other parameters to pass used in the plot or display functions.\n- vmin: float, default None\n    The minimum value of the data.\n- vmax: float, default None\n    The maximum value of the data.\n\n----\n\nExamples\n--------\n- Example #1: Create an interactive 2D plot\n\n    >>> import pyPLUTO as pp\n    >>> D = pp.Load(\"all\")\n    >>> I = pp.Image()\n    >>> I.interactive(\n    ...     D.rho, x1=D.x1, x2=D.x2, cpos=\"right\", vmin=0, vmax=1.0\n    ... )\n    >>> pp.show()\n\n- Example #2: Create an interactive 1D plot with a composite variable\n\n    >>> import pyPLUTO as pp\n    >>> import numpy as np\n    >>> D = pp.Load(\"all\")\n    >>> pp.Image().interactive(D.x1, np.sqrt(D.vx1**2 + D.vx2**2))\n    >>> pp.show()"
  },
  {
    "file": "pyPLUTO/set_axis.py",
    "class": "AxisManager",
    "method": "set_axis",
    "args": {
      "ax": false,
      "check": false
    },
    "kwargs": {
      "figsize": false,
      "grid": false,
      "alpha": false,
      "yscale": false,
      "tight": false,
      "ytickslabels": false,
      "yrange": false,
      "proj": false,
      "xtickslabels": false,
      "tickssize": false,
      "sharey": false,
      "suptitle": false,
      "xrange": false,
      "shareaxisy": false,
      "check": false,
      "xtresh": false,
      "sharex": false,
      "fontsize": false,
      "yticks": false,
      "minorticks": false,
      "ytresh": false,
      "xtitle": false,
      "title": false,
      "xscale": false,
      "xticks": false,
      "ytitle": false,
      "shareaxisx": false,
      "ticksdir": false,
      "titlepad": false,
      "aspect": false,
      "titlesize": false,
      "labelsize": false
    },
    "docstring": "Customization of a single subplot axis. Properties such as the\nrange, scale and aspect of each subplot should be customized here.\n\nReturns\n-------\n- None\n\nParameters\n----------\n- alpha: float, default 1.0\n    Sets the opacity of the plot, where 1.0 means total opaque and 0.0\n    means total transparent.\n- aspect: {'auto', 'equal', float}, default 'auto'\n    Sets the aspect ratio of the plot. The 'auto' keyword is the default\n    option (most likely the plot will be squared). The 'equal' keyword\n    will set the same scaling for x and y. A float will fix the ratio\n    between the y-scale and the x-scale (1.0 is the same as 'equal').\n- ax: ax object, default None\n    The axis to customize. If None the current axis will be selected.\n- fontsize: float, default 17.0\n    Sets the fontsize for all the axis components (only for the current\n    axis).\n- grid: bool | string, default False\n    Enables/disables the grid on the plot. If True it enables both axes\n    grids. If 'x' or 'y' it enables only the x or y axis grid.\n- labelsize: float, default fontsize\n    Sets the labels fontsize (which is the same for both labels).\n    The default value corresponds to the value of the keyword\n    'fontsize'.\n- minorticks: str, default None\n    If not None enables the minor ticks on the plot (for both grid\n    axes).\n- sharex: Matplotlib axis | False, default False\n    Shares the x-axis with another axis.\n- sharey: Matplotlib axis | False, default False\n    Shares the y-axis with another axis.\n- ticksdir: {'in', 'out'}, default 'in'\n    Sets the ticks direction. The default option is 'in'.\n- tickssize: float | bool, default True\n    Sets the ticks fontsize (which is the same for both grid axes).\n    The default value corresponds to the value of the keyword\n    'fontsize'.\n- title: str, default None\n    Places the title of the plot on top of it.\n- titlepad: float, default 8.0\n    Sets the distance between the title and the top of the plot\n- titlesize: float, default fontsize\n    Sets the title fontsize. The default value corresponds to the value\n    of the keyword 'fontsize'.\n- xrange: [float, float], default [0,1]\n    Sets the range in the x-direction. If not defined the code will\n    compute the range while plotting the data.\n- xscale: {'linear','log'}, default 'linear'\n    If enabled (and different from True), sets automatically the scale\n    on the x-axis. Data in log scale should be used with the keyword\n    'log', while data in linear scale should be used with the keyword\n    'linear'.\n- xticks: {[float], None, True}, default True\n    If enabled (and different from True), sets manually ticks on\n    x-axis. In order to completely remove the ticks the keyword should\n    be used with None.\n- xtickslabels: {[str], None, True}, default True\n    If enabled (and different from True), sets manually the ticks\n    labels on the x-axis. In order to completely remove the ticks the\n    keyword should be used with None. Note that fixed tickslabels should\n    always correspond to fixed ticks.\n- xtitle: str, default None\n    Sets and places the label of the x-axis.\n- yrange: [float, float], default [0,1]\n    Sets the range in the y-direction. If not defined the code will\n    compute the range while plotting the data.\n- yscale: {'linear','log'}, default 'linear'\n    If enabled (and different from True), sets automatically the scale\n    on the y-axis. Data in log scale should be used with the keyword\n    'log', while data in linear scale should be used with the keyword\n    'linear'.\n- yticks: {[float], None, True}, default True\n    If enabled (and different from True), sets manually ticks on\n    y-axis. In order to completely remove the ticks the keyword should\n    be used with None.\n- ytickslabels: {[str], None, True}, default True\n    If enabled (and different from True), sets manually the ticks\n    labels on the y-axis. In order to completely remove the ticks the\n    keyword should be used with None. Note that fixed tickslabels should\n    always correspond to fixed ticks.\n- ytitle: str, default None\n    Sets and places the label of the y-axis.\n\n----\n\nExamples\n--------\n- Example #1: create an axis and set title and labels on both axes\n\n    >>> import pyPLUTO as pp\n    >>> I = pp.Image()\n    >>> ax = I.create_axes()\n    >>> I.set_axis(\n    ...     title=\"Title\",\n    ...     titlesize=30.0,\n    ...     xtitle=\"x-axis\",\n    ...     ytitle=\"y-axis\",\n    ... )\n\n- Example #2: create an axis, remove the ticks for the x-axis and\n    set manually the ticks for the y-axis\n\n    >>> import pyPLUTO as pp\n    >>> I = pp.Image()\n    >>> ax = I.create_axes()\n    >>> I.set_axis(\n    ...     ax,\n    ...     xticks=None,\n    ...     yrange=[-1.0, 1.0],\n    ...     yticks=[-0.8, -0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6, 0.8],\n    ... )\n\n- Example #3: create two axes and invert the direction of the ticks in\n    the first one\n\n    >>> import pyPLUTO as pp\n    >>> I = pp.Image()\n    >>> ax = I.create_axes(right=0.7)\n    >>> ax = I.create_axes(left=0.8)\n    >>> I.set_axis(ax=ax[0], ticksdir=\"out\")\n\n- Example #4: create a 2x2 grid with axes labels and customed ticks\n\n    >>> import pyPLUTO as pp\n    >>> I = pp.Image()\n    >>> ax = I.create_axes(ncol=2, nrow=2)\n    >>> for i in [0, 1, 2, 3]:\n    ...     I.set_axis(\n    ...         ax=ax[i],\n    ...         xtitle=\"x-axis\",\n    ...         ytitle=\"y-title\",\n    ...         xticks=[0.25, 0.5, 0.75],\n    ...         yticks=[0.25, 0.5, 0.75],\n    ...         xtickslabels=[\"1/4\", \"1/2\", \"3/4\"],\n    ...     )"
  },
  {
    "file": "pyPLUTO/scatter.py",
    "class": "ScatterManager",
    "method": "scatter",
    "args": {
      "x": false,
      "y": false,
      "check": false
    },
    "kwargs": {
      "legspace": false,
      "extend": false,
      "figsize": false,
      "c": false,
      "grid": false,
      "lw": false,
      "alpha": false,
      "yscale": false,
      "tight": false,
      "cpad": false,
      "mscale": false,
      "ytickslabels": false,
      "vmin": false,
      "yrange": false,
      "proj": false,
      "tresh": false,
      "xtickslabels": false,
      "ms": false,
      "tickssize": false,
      "label": false,
      "cticks": false,
      "legpos": false,
      "sharey": false,
      "suptitle": false,
      "legcols": false,
      "xrange": false,
      "clabel": false,
      "shareaxisy": false,
      "legsize": false,
      "check": false,
      "extendrect": false,
      "xtresh": false,
      "ax": false,
      "sharex": false,
      "cpos": false,
      "fontsize": false,
      "edgecolor": false,
      "edgecolors": false,
      "yticks": false,
      "legalpha": false,
      "cscale": false,
      "minorticks": false,
      "ytresh": false,
      "vmax": false,
      "xtitle": false,
      "fillstyle": false,
      "title": false,
      "xscale": false,
      "xticks": false,
      "ytitle": false,
      "shareaxisx": false,
      "ls": false,
      "marker": false,
      "ticksdir": false,
      "ctickslabels": false,
      "legpad": false,
      "titlepad": false,
      "aspect": false,
      "cmap": false,
      "titlesize": false,
      "labelsize": false
    },
    "docstring": "Scatter plot for a 2D function (or a 2D slice) using the\nmatplotlib's scatter function. A simple figure and a single axis can\nalso be created.\n\nReturns\n-------\n- The scatter plot\n\nParameters\n----------\n- alpha: float, default 1.0\n    Sets the transparency of the plot.\n- aspect: {'auto', 'equal', float}, default 'auto'\n    Sets the aspect ratio of the plot. The 'auto' keyword is the default\n    option (most likely the plot will be squared). The 'equal' keyword\n    will set the same scaling for x and y. A float will fix the ratio\n    between the y-scale and the x-scale (1.0 is the same as 'equal').\n- ax: axis object\nThe axis where to plot the scatter. If not given, the last considered\naxis will be used.\n- c: str, default self.color\n    Determines the scatter plot color. If not defined, the program will\n    loop over an array of 6 color which are different for the most\n    common vision deficiencies.\n- clabel: str, default None\n    Sets the colorbar label.\n- cmap: str, default 'hot'\n    Selects the colormap. If not defined, the colormap 'hot' will be\n    adopted. Some useful colormaps are: plasma, magma, seismic. Please\n    avoid using colorbars like jjet or rainbow, which are not\n    perceptively uniform and not suited for people with vision\n    deficiencies.\n\n- cpos: {'top','bottom','left','right'}, default None\n    Enables the colorbar (if defined), default position on the right.\n- cscale: {'linear','log','symlog','twoslope'}, default 'linear'\n    Sets the colorbar scale. Default is the linear ('norm') scale.\n- edgecolors: str, default None\n    Enables a contouring color for the markers.\n- fontsize: float, default 17.0\n    Sets the fontsize for all the axis components (only for the current\n    axis).\n- grid: bool, default False\n    Enables/disables the grid on the plot.\n- label: str, default None\n    Associates a label to be used for the creation of the legend.\n- labelsize: float, default fontsize\n    Sets the labels fontsize (which is the same for both labels).\n    The default value corresponds to the value of the keyword\n    'fontsize'.\n- legpos: int/str, default None\n    If enabled, creates a legend. This keyword selects the legend\n    location.\n- marker: {'o', 'v', '^', '<', '>', 'X', ' ', etc.}, default ' '\n    Sets an optional symbol for every point. The default value is no\n    marker (' ').\n- minorticks: str, default None\n    If not None enables the minor ticks on the plot (for both grid\n    axes).\n- ms: float, default 3\n    Sets the marker size.\n- ticksdir: {'in', 'out'}, default 'in'\n    Sets the ticks direction. The default option is 'in'.\n- tickssize: float | bool, default True\n    Sets the ticks fontsize (which is the same for both grid axes).\n    The default value corresponds to the value of the keyword\n    'fontsize'.\n- title: str, default None\n    Places the title of the plot on top of it.\n- titlepad: float, default 8.0\n    Sets the distance between the title and the top of the plot\n- titlesize: float, default fontsize\n    Sets the title fontsize. The default value corresponds to the value\n    of the keyword 'fontsize'.\n- tresh: float, default max(abs(vmin),vmax)*0.01\n    Sets the threshold for the colormap. If not defined, the threshold\n    will\n    be set to 1% of the maximum absolute value of the variable.\n    The default cases are the following:\n    - twoslope colorscale: sets the limit between the two linear\n    regimes.\n    - symlog: sets the limit between the logaitrhmic and the linear\n    regime.\n- vmax: float\n    The maximum value of the colormap.\n- vmin: float\n    The minimum value of the colormap.\n- x (not optional): 1D array\n    The x-axis variable.\n- xrange: [float, float], default 'Default'\n    Sets the range in the x-direction. If not defined or set to\n    'Default' the code will compute the range while plotting the data by\n    taking the minimum and the maximum values of the x1-array.\n- xscale: {'linear','log'}, default 'linear'\n    If enabled (and different from True), sets automatically the scale\n    on the x-axis. Data in log scale should be used with the keyword\n    'log', while data in linear scale should be used with the keyword\n    'linear'.\n- xticks: {[float], None, True}, default True\n    If enabled (and different from True), sets manually ticks on\n    x-axis. In order to completely remove the ticks the keyword should\n    be used with None.\n- xtickslabels: {[str], None, True}, default True\n    If enabled (and different from True), sets manually the ticks\n    labels on the x-axis. In order to completely remove the ticks the\n    keyword should be used with None. Note that fixed tickslabels should\n    always correspond to fixed ticks.\n- xtitle: str, default None\n    Sets and places the label of the x-axis.\n- y (not optional): 1D array\n    The y-axis variable.\n- yrange: [float, float], default [0,1]\n    Sets the range in the y-direction. If not defined the code will\n    compute the range while plotting the data.\n- yscale: {'linear','log'}, default 'linear'\n    If enabled (and different from True), sets automatically the scale\n    on the y-axis. Data in log scale should be used with the keyword\n    'log', while data in linear scale should be used with the keyword\n    'linear'.\n- yticks: {[float], None, True}, default True\n    If enabled (and different from True), sets manually ticks on\n    y-axis. In order to completely remove the ticks the keyword should\n    be used with None.\n- ytickslabels: {[str], None, True}, default True\n    If enabled (and different from True), sets manually the ticks\n    labels on the y-axis. In order to completely remove the ticks the\n    keyword should be used with None. Note that fixed tickslabels should\n    always correspond to fixed ticks.\n- ytitle: str, default None\n    Sets and places the label of the y-axis.\n\n----\n\nExamples\n--------\n- Example #1: Plot a scatter plot of a variable\n\n    >>> I.scatter(x, y)\n\n- Example #2: Plot a scatter plot of a variable with a colorbar\n\n    >>> I.scatter(x, y, cmap=\"hot\", c=x**2 + y**2, cpos=\"right\")"
  },
  {
    "file": "pyPLUTO/zoom.py",
    "class": "ZoomManager",
    "method": "zoom",
    "args": {
      "ax": false,
      "check": false
    },
    "kwargs": {
      "extend": false,
      "figsize": false,
      "grid": false,
      "alpha": false,
      "x2": false,
      "yscale": false,
      "tight": false,
      "cpad": false,
      "ytickslabels": false,
      "vmin": false,
      "yrange": false,
      "zoomlines": false,
      "lint": false,
      "proj": false,
      "xtickslabels": false,
      "tresh": false,
      "tickssize": false,
      "bottom": false,
      "cticks": false,
      "sharey": false,
      "suptitle": false,
      "xrange": false,
      "transpose": false,
      "top": false,
      "clabel": false,
      "shareaxisy": false,
      "check": false,
      "zoomcolor": false,
      "extendrect": false,
      "xtresh": false,
      "shading": false,
      "ax": false,
      "sharex": false,
      "cpos": false,
      "fontsize": false,
      "yticks": false,
      "pos": false,
      "cscale": false,
      "minorticks": false,
      "ytresh": false,
      "vmax": false,
      "xtitle": false,
      "title": false,
      "xscale": false,
      "xticks": false,
      "ytitle": false,
      "shareaxisx": false,
      "left": false,
      "ticksdir": false,
      "ctickslabels": false,
      "titlepad": false,
      "aspect": false,
      "var": false,
      "titlesize": false,
      "x1": false,
      "labelsize": false,
      "width": false,
      "cmap": false,
      "height": false
    },
    "docstring": "Creation of an inset zoom of an already existent plot or display.\n\nIt creates a set of axes within the same figure as the original plot or\ndisplay, and can be placed anywhere in the figure.\nThe zoom thus created is to all intents and purposes a self-sufficient\nplot or display, with all the necessary customization options.\n\nReturns\n-------\n- Axis object where the zoom plot is set\n\nParameters\n----------\n- alpha: float, default 1.0\n    Sets the opacity of the plot, where 1.0 means total opaque and 0.0\n    means total transparent.\n- aspect: {'auto', 'equal', float}, default 'auto'\n    Sets the aspect ratio of the plot.\n    The 'auto' keyword is the default option (most likely the plot will\n    be squared). The 'equal' keyword will set the same scaling for\n    x and y. A float will fix the ratio between the y-scale and the\n    x-scale (1.0 is the same as 'equal').\n- ax: ax object, default None\n    The axis to customize. If None the current axis will be selected.\n- bottom: float, default 0.6 + height\n    Bottom position of the inset plot. If not defined the program will\n    give a standard value.\n- clabel: str, default None\n    Sets the label of the colorbar.\n- cmap: str, default 'hot'\n    Selects the colormap. If not defined, the colormap 'hot' will be\n    adopted.\n    Some useful colormaps are: plasma, magma, seismic. Please avoid\n    using colorbars like jet or rainbow, which are not perceptively\n    uniform and not suited for people with vision deficiencies.\n    All the colormap available are listed in the following link:\n    https://matplotlib.org/stable/tutorials/colors/colormaps.html\n- cpad: float, default 0.07\n    Fraction of original axes between colorbar and the axes (in case cax\n    is not defined).\n- cpos: {'top','bottom','left','right'}, default None\n    Enables the colorbar (if defined), default position on the right.\n- cscale: {'linear','log','symlog','twoslope'}, default 'linear'\n    Sets the colorbar scale. Default is the linear ('norm') scale.\n- cticks: {[float], None}, default None\n    If enabled (and different from None), sets manually ticks on the\n    colorbar.\n- ctickslabels: str, default None\n    If enabled, sets manually ticks labels on the colorbar.\n- extend: {'neither','both','min','max'}, default 'neither'\n    Sets the extension of the triangular colorbar extension.\n- extendrect: bool, default False\n    If True, the colorbar extension will be rectangular.\n- fontsize: float, default 17.0\n    Sets the fontsize for all the axis components (only for the current\n    axis).\n- grid: bool, default False\n    Enables the grid.\n- height: float, default 0.15\n    Height of the inset zoom. It is used to defind the top (if not\n    previously defined).\n- label: str, default None\n    Associates a label to each line. Such labels will be used for the\n    creation of the legend.\n- labelsize: float, default fontsize\n    Sets the labels fontsize (which is the same for both labels).\n    The default value corresponds to the value of the keyword\n    'fontsize'.\n- left: float, default 0.6\n    Left position of the inset plot.\n- minorticks: str, default None\n    If not None enables the minor ticks on the plot (for both grid\n    axes).\n- pos: [float,float,float,float], default None\n    Position of the inset plot (left, right, bottom, top).\n    If missing the code will look for the single keywords\n    (top/bottom, left, width, height).\n- shading: {'flat,'nearest','auto','gouraud'}, default 'auto'\n    The shading between the grid points. If not defined, the shading\n    will be one between 'flat' and 'nearest' depending on the size of\n    the x,y and z arrays. The 'flat' shading works only if, given a NxM\n    z-array, the x- and y-arrays have sizes of, respectively, N+1 and\n    M+1. All the other shadings require a N x-array and a M y-array.\n- ticksdir: {'in', 'out'}, default 'in'\n    Sets the ticks direction. The default option is 'in'.\n- tickssize: float, default fontsize\n    Sets the ticks fontsize (which is the same for both grid axes).\n    The default value corresponds to the value of the keyword\n    'fontsize'.\n- title: str, default None\n    Places the title of the plot on top of it.\n- titlesize: float, default fontsize\n    Sets the title fontsize. The default value corresponds to the value\n    of the keyword 'fontsize'.\n- top: float, default bottom + height\n    Top position of the inset plot. If both top and bottom keywords are\n    present the priority will go to the top keyword.\n- transpose: True/False, default False\n    Transposes the variable matrix. Use is not recommended if not really\n    necessary (e.g. in case of highly customized variables and plots)\n- tresh: float, default max(abs(vmin),vmax)*0.01\n    Additional parameter in presence of a composite colormap. The\n    specific cases are the following:\n    - twoslope colorscale: sets the limit between the two linear\n    regimes.\n    - symlog: sets the limit between the logarithmic and the linear\n    regime.\n- var: 2D array\n    The array to be plotted.\n- vmax: float, default max(z)\n    The maximum value of the colormap. If not defined, the maximum value\n    of z will be taken.\n- vmin: float, default min(z)\n    The minimum value of the colormap. If not defined, the minimum value\n    of z will be taken.\n- width: float, default 0.15\n    Width of the inset zoom. It is used to define the right border.\n- x1: 1D/2D array, default 'Default'\n    the 'x' array. If not defined, a default array will be generated\n    depending on the size of z.\n- x2: 1D/2D array, default 'Default'\n    the 'y' array. If not defined, a default array will be generated\n    depending on the size of z.\n- xrange: [float, float], default [0,1]\n    Sets the range in the x-direction. If not defined the code will\n    compute the range while plotting the data.\n- xscale: {'linear','log'}, default 'linear'\n    If enabled (and different from 'Default'), sets automatically the\n    scale on the x-axis. Data in log scale should be used with the\n    keyword 'log', while data in linear scale should be used with the\n    keyword 'linear'.\n- xticks: {[float], None, 'Default'}, default 'Default'\n    If enabled (and different from 'Default'), sets manually ticks on\n    x-axis. In order to completely remove the ticks the keyword should\n    be used with None.\n- xtickslabels: {[str], None, 'Default'}, default 'Default'\n    If enabled (and different from 'Default'), sets manually the ticks\n    labels on the x-axis. In order to completely remove the ticks the\n    keyword should be used with None. Note that fixed tickslabels should\n    always correspond to fixed ticks.\n- xtitle: str, default None\n    Sets and places the label of the x-axis.\n- yrange: [float, float], default [0,1]\n    Sets the range in the y-direction. If not defined the code will\n    compute the range while plotting the data.\n- yscale: {'linear','log'}, default 'linear'\n    If enabled (and different from 'Default'), sets automatically the\n    scale on the y-axis. Data in log scale should be used with the\n    keyword 'log', while data in linear scale should be used with the\n    keyword 'linear'.\n- yticks: {[float], None, 'Default'}, default 'Default'\n    If enabled (and different from 'Default'), sets manually ticks on\n    y-axis. In order to completely remove the ticks the keyword should\n    be used with None.\n- ytickslabels: {[str], None, 'Default'}, default 'Default'\n    If enabled (and different from 'Default'), sets manually the ticks\n    labels on the y-axis. In order to completely remove the ticks the\n    keyword should be used with None. Note that fixed tickslabels should\n    always correspond to fixed ticks.\n- ytitle: str, default None\n    Sets and places the label of the y-axis.\n- zoomcolor: str, default 'k'\n    Sets the color of the inset zoom lines\n- zoomlines: bool, default True\n    Keyword in order to add/remove the inset zoom lines. The default\n    option is True.\n\n----\n\nExamples\n--------\n- Example #1: create a simple zoom of a 1d plot\n\n    >>> import pyPLUTO as pp\n    >>> I = pp.Image()\n    >>> I.plot(x1, var)\n    >>> I.zoom(pos = [0.1,0.2,0.1,0.3], xrange = [1,10], y\n    ... range = [10,20])\n\n- Example #2: create a simple zoom of a 2d plot\n\n    >>> import pyPLUTO as pp\n    >>> I = pp.Image()\n    >>> I.display(var, x1=x1, x2=x2)\n    >>> I.zoom(\n    ...     left=0.8,\n    ...     bottom=0.9,\n    ...     height=0.2,\n    ...     width=0.2,\n    ...     xrange=[1, 10],\n    ...     yrange=[10, 20],\n    ... )\n\n- Example #3: create a zoom of a different quantity over a 2d plot\n\n    >>> import pyPLUTO as pp\n    >>> I = pp.Image()\n    >>> I.display(var, x1=x1, x2=x2)\n    >>> I.zoom(var=var2, xrange=[1, 10], yrange=[10, 20])"
  },
  {
    "file": "pyPLUTO/create_axes.py",
    "class": "CreateAxesManager",
    "method": "create_axes",
    "args": {
      "ncol": false,
      "nrow": false,
      "check": false
    },
    "kwargs": {
      "fontsize": false,
      "figsize": false,
      "sharey": false,
      "suptitle": false,
      "tight": false,
      "check": false,
      "proj": false,
      "sharex": false
    },
    "docstring": "Creation of a set of axes using add_subplot from the matplotlib\nlibrary.\n\nIf additional parameters (like the figure limits or the spacing)\nare given, the plots are located using set_position.\nThe spacing and the ratio between the plots can be given by hand.\nIn case only few custom options are given, the code computes the rest\n(but gives a small warning); in case no custom option is given, the axes\nare located through the standard methods of matplotlib.\n\nIf more axes are created in the figure, the list of all axes is\nreturned, otherwise the single axis is returned.\n\nReturns\n-------\n- The list of axes (if more axes are in the figure) or the axis\n(if only one axis is present)\n\nParameters\n----------\n- bottom: float, default 0.1\n    The space from the bottom border to the last row of plots.\n- figsize: [float, float], default [6*sqrt(ncol),5*sqrt(nrow)]\n    Sets the figure size. The default value is computed from the number\n    of rows and columns.\n- fontsize: float, default 17.0\n    Sets the fontsize for all the axes.\n- hratio: [float], default [1.0]\n    Ratio between the rows of the plot. The default is that every plot\n    row has the same height.\n- hspace: [float], default []\n    The space between plot rows (in figure units). If not enough or\n    too many spaces are considered, the program will remove the excess\n    and fill the lacks with [0.1].\n- left: float, default 0.125\n    The space from the left border to the leftmost column of plots.\n- ncol: int, default 1\n    The number of columns of subplots.\n- nrow: int, default 1\n    The number of rows of subplots.\n- proj: str, default None\n    Custom projection for the plot (e.g. 3D). Recommended only if\n    needed.\n    WARNING: pyPLUTO does not support 3D plotting for now, only 3D axes.\n    The 3D plot feature will be available in future releases.\n- right: float, default 0.9\n    The space from the right border to the rightmost column of plots.\n- sharex: bool | str | Matplotlib axis, default False\n    Enables/disables the sharing of the x-axis between the subplots.\n- sharey: bool | str | Matplotlib axis, default False\n    Enables/disables the sharing of the y-axis between the subplots.\n- suptitle: str, default None\n    Creates a figure title over all the subplots.\n- tight: bool, default True\n    Enables/disables tight layout options for the figure. In case of a\n    highly customized plot (e.g. ratios or space between rows and\n    columns) the option is set by default to False since that option\n    would not be available for standard matplotlib functions.\n- top: float, default 0.9\n    The space from the top border to the first row of plots.\n- wratio: [float], default [1.0]\n    Ratio between the columns of the plot. The default is that every\n    plot column has the same width.\n- wspace: [float], default []\n    The space between plot columns (in figure units). If not enough or\n    too many spaces are considered, the program will remove the excess\n    and fill the lacks with [0.1].\n\n----\n\nExamples\n--------\n- Example #1: create a simple grid of 2 columns and 2 rows on a new\n  figure\n\n    >>> import pyPLUTO as pp\n    >>> I = pp.Image()\n    >>> ax = I.create_axes(ncol=2, nrow=2)\n\n- Example #2: create a grid of 2 columns with the first one having half\n  the width of the second one\n\n    >>> import pyPLUTO as pp\n    >>> I = pp.Image()\n    >>> ax = I.create_axes(ncol=2, wratio=[0.5, 1])\n\n- Example #3: create a grid of 2 rows with a lot of blank space between\n  them\n\n    >>> import pyPLUTO as pp\n    >>> I = pp.Image()\n    >>> ax = I.create_axes(nrow=2, hspace=[0.5])\n\n- Example #4: create a 2x2 grid with a fifth image on the right side\n\n    >>> import pyPLUTO as pp\n    >>> I = pp.Image()\n    >>> ax = I.create_axes(ncol=2, nrow=2, right=0.7)\n    >>> ax = I.create_axes(left=0.75)"
  },
  {
    "file": "pyPLUTO/streamplot.py",
    "class": "StreamplotManager",
    "method": "streamplot",
    "args": {
      "var1": false,
      "var2": false,
      "check": false
    },
    "kwargs": {
      "density": false,
      "extend": false,
      "figsize": false,
      "c": false,
      "lw": false,
      "grid": false,
      "x2": false,
      "integration_direction": false,
      "alpha": false,
      "yscale": false,
      "tight": false,
      "cpad": false,
      "ytickslabels": false,
      "vmin": false,
      "yrange": false,
      "lint": false,
      "arrowsize": false,
      "proj": false,
      "tresh": false,
      "xtickslabels": false,
      "tickssize": false,
      "start_points": false,
      "cticks": false,
      "sharey": false,
      "suptitle": false,
      "minlength": false,
      "transpose": false,
      "xrange": false,
      "clabel": false,
      "shareaxisy": false,
      "check": false,
      "extendrect": false,
      "xtresh": false,
      "ax": false,
      "cpos": false,
      "sharex": false,
      "fontsize": false,
      "yticks": false,
      "maxlength": false,
      "cscale": false,
      "minorticks": false,
      "ytresh": false,
      "vmax": false,
      "xtitle": false,
      "title": false,
      "xscale": false,
      "xticks": false,
      "ytitle": false,
      "shareaxisx": false,
      "arrowstyle": false,
      "ticksdir": false,
      "ctickslabels": false,
      "titlepad": false,
      "aspect": false,
      "x1": false,
      "cmap": false,
      "titlesize": false,
      "labelsize": false,
      "brokenlines": false
    },
    "docstring": "Plots a streamplot of a vector field. The function uses the\nstreamplot function from matplotlib.pyplot.\n\nReturns\n-------\n- strm: LineCollection\n    The streamplot of the given vector field.\n\nParameters\n----------\n- alpha: float, default 1.0\n    Sets the opacity of the plot, where 1.0 means total opaque and 0.0\n    means total transparent.\n- arrowsize: float, default 1.0\n    Sets the size of the arrows of the streamline.\n- arrowstyle: str, default '-|>'\n    Sets the style of the arrows of the streamline.\n- aspect: {'auto', 'equal', float}, default 'auto'\n    Sets the aspect ratio of the plot. The 'auto' keyword is the default\n    option (most likely the plot will be squared). The 'equal' keyword\n    will set the same scaling for x and y. A float will fix the ratio\n    between the y-scale and the x-scale (1.0 is the same as 'equal').\n- ax: axis object\n    The axis where to plot the streamlines. If not given, the last\n    considered axis will be used.\n- brokenlines: bool, default True\n    Splits the streamlines in shorter segments.\n- c: str, default self.color\n    Determines the streamplot color. If not defined, the program will\n    loop over an array of 6 color which are different for the most\n    common vision deficiencies.\n- cmap: str, default 'hot'\n    Selects the colormap. If not defined, the colormap 'hot' will be\n    adopted. Some useful colormaps are: plasma, magma, seismic. Please\n    avoid using colorbars like jjet or rainbow, which are not\n    perceptively uniform and not suited for people with vision\n    deficiencies.\n    All the colormap available are listed in the following link:\n    https://matplotlib.org/stable/tutorials/colors/colormaps.html\n- cpos: {'top','bottom','left','right'}, default None\n    Enables the colorbar (if defined), default position on the right.\n- cscale: {'linear','log','symlog','twoslope'}, default 'linear'\n    Sets the colorbar scale. Default is the linear ('norm') scale.\n- density: float, default 1.0\n    Sets the density and closeness of the streamlines. The domain is\n    divided in a 30x30 grid. When set as default, each cells contains at\n    most a number of crossing streamplot line equal to this keyword.\n- extend: {'neither','both','min','max'}, default 'neither'\n    Sets the extension of the triangular colorbar extension.\n- extendrect: bool, default False\n    If True, the colorbar extension will be rectangular.\n- fontsize: float, default 17.0\n    Sets the fontsize for all the axis components (only for the current\n    axis).\n- grid: bool, default False\n    Enables/disables the grid on the plot.\n- integration_direction: {'forward', 'backward', 'both'}, default:'both'\n    Sets the streamlines integration in the forward direction, backward\n    direction, or both.\n- labelsize: float, default fontsize\n    Sets the labels fontsize (which is the same for both labels).\n    The default value corresponds to the value of the keyword\n    'fontsize'.\n- lw: float, default 1.0\n    Sets the width of the streamlines.\n- maxlength: float, default 5.0\n    Sets the maximum length of a streamline in coordinates units.\n- minlength: float, default 0.1\n    Sets the minimum length of a streamline in coordinates units.\n- minorticks: str, default None\n    If not None enables the minor ticks on the plot (for both grid\n    axes).\n- start_points: np.ndarray, default None\n    Sets the starting points of the streamlines, if a more controlled\n    plot is wanted.\n- ticksdir: {'in', 'out'}, default 'in'\n    Sets the ticks direction. The default option is 'in'.\n- tickssize: float | bool, default True\n    Sets the ticks fontsize (which is the same for both grid axes).\n    The default value corresponds to the value of the keyword\n    'fontsize'.\n- title: str, default None\n    Places the title of the plot on top of it.\n- titlepad: float, default 8.0\n    Sets the distance between the title and the top of the plot\n- titlesize: float, default fontsize\n    Sets the title fontsize. The default value corresponds to the value\n    of the keyword 'fontsize'.\n- transpose: True/False, default False\n    Transposes the variable matrix. Use is not recommended if not really\n    necessary (e.g. in case of highly customized variables and plots)\n- tresh: float, default max(abs(vmin),vmax)*0.01\n    Sets the threshold for the colormap. If not defined, the threshold\n    will be set to 1% of the maximum absolute value of the variable.\n    The default cases are the following:\n    - twoslope colorscale: sets the limit between the two linear\n    regimes.\n    - symlog: sets the limit between the logaitrhmic and the linear\n    regime.\n- var1 (not optional): np.ndarray\n    The x1-component of the vector field.\n- var2 (not optional): np.ndarray\n    The x2-component of the vector field.\n- vmax: float\n    The maximum value of the vector field norm.\n- vmin: float\n    The minimum value of the vector field norm.\n- x1: np.ndarray\n    The x-axis variable.\n- x2: np.ndarray\n    The y-axis variable.\n- xrange: [float, float], default [0,1]\n    Sets the range in the x-direction. If not defined the code will\n    compute the range while plotting the data.\n- xscale: {'linear','log'}, default 'linear'\n    If enabled (and different from True), sets automatically the scale\n    on the x-axis. Data in log scale should be used with the keyword\n    'log', while data in linear scale should be used with the keyword\n    'linear'.\n- xticks: {[float], None, True}, default True\n    If enabled (and different from True), sets manually ticks on\n    x-axis. In order to completely remove the ticks the keyword should\n    be used with None.\n- xtickslabels: {[str], None, True}, default True\n    If enabled (and different from True), sets manually the ticks\n    labels on the x-axis. In order to completely remove the ticks the\n    keyword should be used with None. Note that fixed tickslabels should\n    always correspond to fixed ticks.\n- xtitle: str, default None\n    Sets and places the label of the x-axis.\n- yrange: [float, float], default [0,1]\n    Sets the range in the y-direction. If not defined the code will\n    compute the range while plotting the data.\n- yscale: {'linear','log'}, default 'linear'\n    If enabled (and different from True), sets automatically the scale\n    on the y-axis. Data in log scale should be used with the keyword\n    'log', while data in linear scale should be used with the keyword\n    'linear'.\n- yticks: {[float], None, True}, default True\n    If enabled (and different from True), sets manually ticks on\n    y-axis. In order to completely remove the ticks the keyword should\n    be used with None.\n- ytickslabels: {[str], None, True}, default True\n    If enabled (and different from True), sets manually the ticks\n    labels on the y-axis. In order to completely remove the ticks the\n    keyword should be used with None. Note that fixed tickslabels should\n    always correspond to fixed ticks.\n- ytitle: str, default None\n    Sets and places the label of the y-axis.\n\n----\n\nExamples\n--------\n- Example #1: Plot a streamplot of a vector field\n\n    >>> I.streamplot(D.Bx1, D.Bx2)"
  },
  {
    "file": "pyPLUTO/display.py",
    "class": "DisplayManager",
    "method": "display",
    "args": {
      "var": false,
      "check": false
    },
    "kwargs": {
      "extend": false,
      "figsize": false,
      "grid": false,
      "x2": false,
      "alpha": false,
      "yscale": false,
      "tight": false,
      "cpad": false,
      "ytickslabels": false,
      "vmin": false,
      "yrange": false,
      "lint": false,
      "proj": false,
      "tresh": false,
      "xtickslabels": false,
      "tickssize": false,
      "cticks": false,
      "sharey": false,
      "suptitle": false,
      "xrange": false,
      "transpose": false,
      "clabel": false,
      "shareaxisy": false,
      "check": false,
      "extendrect": false,
      "xtresh": false,
      "shading": false,
      "ax": false,
      "sharex": false,
      "cpos": false,
      "fontsize": false,
      "yticks": false,
      "cscale": false,
      "minorticks": false,
      "ytresh": false,
      "vmax": false,
      "xtitle": false,
      "title": false,
      "xscale": false,
      "xticks": false,
      "ytitle": false,
      "shareaxisx": false,
      "ticksdir": false,
      "ctickslabels": false,
      "titlepad": false,
      "aspect": false,
      "x1": false,
      "cmap": false,
      "titlesize": false,
      "labelsize": false
    },
    "docstring": "Plot for a 2D function (or a 2D slice) using the matplotlib's\npcolormesh function. A simple figure and a single axis can also be\ncreated.\n\nReturns\n-------\n- The 2D plot\n\nParameters\n----------\n- alpha: float, default 1.0\n    Sets the transparency of the plot.\n- aspect: {'auto', 'equal', float}, default 'auto'\n    Sets the aspect ratio of the plot.\n    The 'auto' keyword is the default option (most likely the plot will\n    be squared). The 'equal' keyword will set the same scaling for\n    x and y. A float will fix the ratio between the y-scale and the\n    x-scale (1.0 is the same as 'equal').\n- ax: ax | int | None, default None\n    The axis where to plot the lines. If None, a new axis is created.\n    If 'old', the last considered axis will be used.\n- bottom: float, default 0.1\n    The space from the bottom border to the plot.\n- clabel: str, default None\n    Sets the label of the colorbar.\n- cmap: str, default 'plasma'\n    Selects the colormap. If not defined, the colormap 'plasma' will be\n    adopted. Some useful colormaps are: plasma, magma, seismic. Please\n    avoid using colorbars like jet or rainbow, which are not\n    perceptively uniform and not suited for people with vision\n    deficiencies.\n- cpad: float, default 0.07\n    Fraction of original axes between colorbar and the axes (in case cax\n    is not defined).\n- cpos: {'top','bottom','left','right'}, default None\n    Enables the colorbar (if defined), default position on the right.\n- cscale: {'linear','log','symlog','twoslope'}, default 'linear'\n    Sets the colorbar scale. Default is the linear ('norm') scale.\n- cticks: {[float], None}, default None\n    If enabled (and different from None), sets manually ticks on the\n    colorbar.\n- ctickslabels: str, default None\n    If enabled, sets manually ticks labels on the colorbar.\n- extend: {'neither','both','min','max'}, default 'neither'\n    Sets the extension of the triangular colorbar extension.\n- extendrect: bool, default False\n    If True, the colorbar extension will be rectangular.\n- figsize: [float, float], default [6*sqrt(ncol),5*sqrt(nrow)]\n    Sets the figure size. The default value is computed from the number\n    of rows and columns.\n- fontsize: float, default 17.0\n    Sets the fontsize for all the axes.\n- grid: Bool, default False\n    Enables the grid on the plot.\n- labelsize: float, default fontsize\n    Sets the labels fontsize (which is the same for both labels).\n    The default value corresponds to the value of the keyword\n    'fontsize'.\n- left: float, default 0.125\n    The space from the left border to the plot.\n- minorticks: str, default None\n    If not None enables the minor ticks on the plot (for both grid\n    axes).\n- proj: str, default None\n    Custom projection for the plot (e.g. 3D). Recommended only if\n    needed.\n    This keyword should be used only if the axis is created.\n    WARNING: pyPLUTO does not support 3D plotting for now, only 3D axes.\n    The 3D plot feature will be available in future releases.\n- right: float, default 0.9\n    The space from the right border to the plot.\n- shading: {'flat,'nearest','auto','gouraud'}, default 'auto'\n    The shading between the grid points. If not defined, the shading\n    will one between 'flat' and 'nearest' depending on the size of the\n    x,y and z arrays. The 'flat' shading works only if, given a NxM\n    z-array, the x- and y-arrays have sizes of, respectively, N+1 and\n    M+1. All the other shadings require a N x-array and a M y-array.\n- ticksdir: {'in', 'out'}, default 'in'\n    Sets the ticks direction. The default option is 'in'.\n- tickssize: float, default fontsize\n    Sets the ticks fontsize (which is the same for both grid axes).\n    The default value corresponds to the value of the keyword\n    'fontsize'.\n- title: str, default None\n    Places the title of the plot on top of it.\n- titlesize: float, default fontsize\n    Sets the title fontsize. The default value corresponds to the value\n    of the keyword 'fontsize'.\n- top: float, default 0.9\n    The space from the top border to the plot.\n- transpose: True/False, default False\n    Transposes the variable matrix. Use is not recommended if not really\n    necessary (e.g. in case of highly customized variables and plots)\n- tresh: float, default max(abs(vmin),vmax)*0.01\n    Sets the threshold for the colormap. If not defined, the threshold\n    will be set to 1% of the maximum absolute value of the variable.\n    The default cases are the following:\n    - twoslope colorscale: sets the limit between the two linear\n    regimes.\n    - symlog: sets the limit between the logaitrhmic and the linear\n    regime.\n- var (not optional): 2D array\n    The array to be plotted.\n- vmax: float, default max(var)\n    The maximum value of the colormap. If not defined, the maximum value\n    of z will be taken.\n- vmin: float, default min(var)\n    The minimum value of the colormap. If not defined, the minimum value\n    of z will be taken.\n- x1: np.ndarray, default 'Default'\n    the 'x' array. If not defined, a default array will be generated\n    depending on the size of z.\n- x2: np.ndarray, default 'Default'\n    the 'y' array. If not defined, a default array will be generated\n    depending on the size of z.\n- xrange: [float, float], default 'Default'\n    Sets the range in the x-direction. If not defined or set to\n    'Default' the code will compute the range while plotting the data by\n    taking the minimum and the maximum values of the x1-array.\n- xscale: {'linear','log'}, default 'linear'\n    If enabled (and different from 'Default'), sets automatically the\n    scale on the x-axis. Data in log scale should be used with the\n    keyword 'log', while data in linear scale should be used with the\n    keyword 'linear'.\n- xticks: [float] | None | bool, default True\n    If enabled (and different from 'Default'), sets manually ticks on\n    x-axis. In order to completely remove the ticks the keyword should\n    be used with None.\n- xtickslabels: [str] | None | bool, default True\n    If enabled (and different from 'Default'), sets manually the ticks\n    labels on the x-axis. In order to completely remove the ticks the\n    keyword should be used with None. Note that fixed tickslabels should\n    always correspond to fixed ticks.\n- xtitle: str, default None\n    Sets and places the label of the x-axis.\n- yrange: [float, float], default 'Default'\n    Sets the range in the y-direction. If not defined or set to\n    'Default' the code will compute the range while plotting the data by\n    taking the minimum and the maximum values of the x2-array.\n- yscale: {'linear','log'}, default 'linear'\n    If enabled (and different from 'Default'), sets automatically the\n    scale on the y-axis. Data in log scale should be used with the\n    keyword 'log', while data in linear scale should be used with the\n    keyword 'linear'.\n- yticks: [float] | None | bool, default True\n    If enabled (and different from 'Default'), sets manually ticks on\n    y-axis. In order to completely remove the ticks the keyword should\n    be used with None.\n- ytickslabels: [float] | None | bool, default True\n    If enabled (and different from 'Default'), sets manually the ticks\n    labels on the y-axis. In order to completely remove the ticks the\n    keyword should be used with None. Note that fixed tickslabels should\n    always correspond to fixed ticks.\n- ytitle: str, default None\n    Sets and places the label of the y-axis.\n\n----\n\nExamples\n--------\n- Example #1: create a simple 2d plot with title and colorbar on the\n    right\n\n    >>> import pyPLUTO as pp\n    >>> I = pp.Image()\n    >>> I.display(var, title=\"title\", cpos=\"right\")\n\n- Example #2: create a 2d plot with title on the axes, bottom colorbar\n    and custom shading\n\n    >>> import pyPLUTO as pp\n    >>> I = pp.Image()\n    >>> I.display(x1, x2, var, xtitle = 'x', ytitle = 'y',\n            cpos = 'bottom', shading = 'gouraud', cpad = 0.3)\n\n- Example #3: create a 2d plot con custom range on axes and logarithmic\n    scale colorbar\n\n    >>> import pyPLUTO as pp\n    >>> I = pp.Image()\n    >>> I.display(var, xrange = [2,3], yrange = [2,4], cbar = 'right',\n                cscale = 'log')\n\n- Example #4: create a 2d plot with a custom symmetric logarithmic\n    colorbar with custom ticks.\n\n    >>> import pyPLUTO as pp\n    >>> I = pp.Image()\n    >>> I.display(var, cpos = 'right', cmap = 'RdBu_r',\n                cscale = 'symlog', tresh = 0.001, vmin = -1, vmax = 1)"
  },
  {
    "file": "pyPLUTO/imagetools.py",
    "class": "ImageToolsManager",
    "method": "savefig",
    "args": {
      "filename": false,
      "bbox": false,
      "dpi": false
    },
    "kwargs": {},
    "docstring": "Creation of a .png image file of the figure created with the\nImage class.\n\nReturns\n-------\n- None\n\nParameters\n----------\n- bbox: {'tight', None}, default 'tight'\n    Crops the white borders of the Image to create a more balanced image\n    file.\n- filename: str, default 'img.png'\n    The name of the saved image file.\n\n----\n\nExamples\n--------\n- Example #1: save an empty image\n\n    >>> import pyPLUTO as pp\n    >>> I = pp.Image()\n    >>> I.savefig(\"namefile.png\")"
  },
  {
    "file": "pyPLUTO/imagetools.py",
    "class": "ImageToolsManager",
    "method": "show",
    "args": {},
    "kwargs": {},
    "docstring": "Shows the figure created with the Image class. This method is\ndeprecated and will be removed in future versions. Please use\npp.show instead."
  },
  {
    "file": "pyPLUTO/imagetools.py",
    "class": "ImageToolsManager",
    "method": "text",
    "args": {
      "text": false,
      "x": false,
      "y": false,
      "ax": false,
      "check": false
    },
    "kwargs": {
      "fontsize": false,
      "textsize": false,
      "figsize": false,
      "c": false,
      "sharey": false,
      "xycoords": false,
      "suptitle": false,
      "horalign": false,
      "tight": false,
      "bbox": false,
      "check": false,
      "veralign": false,
      "proj": false,
      "sharex": false
    },
    "docstring": "Insertion of a text box inside the figure created with Image\nclass.\n\nReturns\n-------\n- None\n\nParameters\n----------\n- ax: axis object, default None\n    The axis where to insert the text box. If None, the last considered\n    axis will be used.\n- c: str, default 'k'\n    Determines the text color.\n- horalign: str, default 'left'\n    The horizontal alignment. Possible values are 'left', 'center',\n    'right'.\n- text (not optional): str\n    The text that will appear on the text box\n- textsize: float, default fontsize\n    Sets the text fontsize. The default value corresponds to the value\n    of the actual fontsize in the figure.\n- veralign: str, default 'baseline'\n    The vertical alignment. Possible values are 'baseline', 'bottom',\n    'center', 'center_baseline', 'top'.\n- x: float, default 0.85\n    The horizontal starting position of the text box, in units of figure\n    size.\n- xycoords: str, default 'fraction'\n    The coordinate system used. Possible values are 'figure fraction',\n    which sets the position as a fraction of the axis (inside the axis\n    lie values between 0 and 1), 'points', which sets the position in\n    units of the x/y coordinate system, and 'figure', which sets the\n    position as a fraction of the figure.\n- y: float, default 0.85\n    The vertical starting position of the text box, in units of figure\n    size.\n\n----\n\nExamples\n--------\n- Example #1: Insert text inside a specific axis\n\n    >>> I.text(\"text\", x=0.5, y=0.5, ax=ax)\n\n- Example #2: Insert text inside the last axis\n\n    >>> I.text(\"text\", x=0.5, y=0.5)\n\n- Example #3: Insert text inside the last axis with a specific fontsize\n\n    >>> I.text(\"text\", x=0.5, y=0.5, textsize=20)\n\n- Example #4: Insert text inside the last axis with a specific fontsize\n    and a specific color\n\n    >>> I.text(\"text\", x=0.5, y=0.5, textsize=20, c=\"r\")\n\n- Example #5: Insert text inside the last axis with a points position\n\n    >>> I.text(\"text\", x=0.5, y=0.5, xycoords=\"points\")"
  },
  {
    "file": "pyPLUTO/contour.py",
    "class": "ContourManager",
    "method": "contour",
    "args": {
      "var": false,
      "check": false
    },
    "kwargs": {
      "extend": false,
      "figsize": false,
      "c": false,
      "lw": false,
      "grid": false,
      "x2": false,
      "alpha": false,
      "yscale": false,
      "tight": false,
      "cpad": false,
      "ytickslabels": false,
      "vmin": false,
      "yrange": false,
      "lint": false,
      "proj": false,
      "tresh": false,
      "xtickslabels": false,
      "levels": false,
      "tickssize": false,
      "cticks": false,
      "sharey": false,
      "suptitle": false,
      "xrange": false,
      "transpose": false,
      "clabel": false,
      "shareaxisy": false,
      "check": false,
      "extendrect": false,
      "xtresh": false,
      "ax": false,
      "sharex": false,
      "cpos": false,
      "fontsize": false,
      "yticks": false,
      "cscale": false,
      "minorticks": false,
      "ytresh": false,
      "vmax": false,
      "xtitle": false,
      "title": false,
      "xscale": false,
      "xticks": false,
      "ytitle": false,
      "shareaxisx": false,
      "ticksdir": false,
      "ctickslabels": false,
      "titlepad": false,
      "aspect": false,
      "x1": false,
      "cmap": false,
      "titlesize": false,
      "labelsize": false
    },
    "docstring": "Plots a contour plot of a given variable. The function uses the\nmatplotlib.pyplot.contour function. The function returns None.\n\nReturns\n-------\n- cnt: LineCollection\n    The set of contour lines of the given variable.\n\nParameters\n----------\n- alpha: float, default 1.0\n    Sets the transparency of the contour lines.\n- aspect: {'auto', 'equal', float}, default 'auto'\n    Sets the aspect ratio of the plot. The 'auto' keyword is the default\n    option (most likely the plot will be squared). The 'equal' keyword\n    will set the same scaling for x and y. A float will fix the ratio\n    between the y-scale and the x-scale (1.0 is the same as 'equal').\n- ax: {ax object, 'old', None}, default None\n    The axis where to plot the lines. If None, a new axis is created.\n    If 'old', the last considered axis will be used.\n- c: str, default self.color\n    Determines the contour lines plot. If not defined, the program will\n    loop over an array of 6 color which are different for the most\n    common vision deficiencies.\n- cmap: str, default 'hot'\n    Selects the colormap. If not defined, the colormap 'hot' will be\n    adopted. Some useful colormaps are: plasma, magma, seismic. Please\n    avoid using colorbars like jjet or rainbow, which are not\n    perceptively uniform and not suited for people with vision\n    deficiencies.\n- cpos: {'top','bottom','left','right'}, default None\n    Enables the colorbar (if defined), default position on the right.\n- cscale: {'linear','log','symlog','twoslope'}, default 'linear'\n    Sets the colorbar scale. Default is the linear ('norm') scale.\n- extend: {'neither','both','min','max'}, default 'neither'\n    Sets the extension of the triangular colorbar extension.\n- extendrect: bool, default False\n    If True, the colorbar extension will be rectangular.\n- fontsize: float, default 17.0\n    Sets the fontsize for all the axis components (only for the current\n    axis).\n- grid: bool, default False\n    Enables/disables the grid on the plot.\n- labelsize: float, default fontsize\n    Sets the labels fontsize (which is the same for both labels).\n    The default value corresponds to the value of the keyword\n    'fontsize'.\n- levels: np.ndarray\n    The levels of the contour lines.\n- minorticks: str, default None\n    If not None enables the minor ticks on the plot (for both grid\n    axes).\n- sharex: Matplotlib axis | False, default False\n    Shares the x-axis with another axis.\n- sharey: Matplotlib axis | False, default False\n    Shares the y-axis with another axis.\n- ticksdir: {'in', 'out'}, default 'in'\n    Sets the ticks direction. The default option is 'in'.\n- tickssize: float | bool, default True\n    Sets the ticks fontsize (which is the same for both grid axes).\n    The default value corresponds to the value of the keyword\n    'fontsize'.\n- title: str, default None\n    Places the title of the plot on top of it.\n- titlepad: float, default 8.0\n    Sets the distance between the title and the top of the plot\n- titlesize: float, default fontsize\n    Sets the title fontsize. The default value corresponds to the value\n    of the keyword 'fontsize'.\n- transpose: True/False, default False\n    Transposes the variable matrix. Use is not recommended if not really\n    necessary (e.g. in case of highly customized variables and plots).\n- tresh: float, default max(abs(vmin),vmax)*0.01\n    Sets the threshold for the colormap. If not defined, the threshold\n    will be set to 1% of the maximum absolute value of the variable.\n    The default cases are the following:\n    - twoslope colorscale: sets the limit between the two linear\n    regimes.\n    - symlog: sets the limit between the logaitrhmic and the linear\n    regime.\n- var (not optional): np.ndarray\n    The variable to be plotted.\n- vmax: float\n    The maximum value of the colormap.\n- vmin: float\n    The minimum value of the colormap.\n- x1: 1D array, default 'Default'\n    The 'x' array.\n- x2: 1D array, default 'Default'\n    The 'y' array.\n- xrange: [float, float], default [0,1]\n    Sets the range in the x-direction. If not defined the code will\n    compute the range while plotting the data.\n- xscale: {'linear','log'}, default 'linear'\n    If enabled (and different from True), sets automatically the scale\n    on the x-axis. Data in log scale should be used with the keyword\n    'log', while data in linear scale should be used with the keyword\n    'linear'.\n- xticks: {[float], None, True}, default True\n    If enabled (and different from True), sets manually ticks on\n    x-axis. In order to completely remove the ticks the keyword should\n    be used with None.\n- xtickslabels: {[str], None, True}, default True\n    If enabled (and different from True), sets manually the ticks\n    labels on the x-axis. In order to completely remove the ticks the\n    keyword should be used with None. Note that fixed tickslabels should\n    always correspond to fixed ticks.\n- xtitle: str, default None\n    Sets and places the label of the x-axis.\n- yrange: [float, float], default [0,1]\n    Sets the range in the y-direction. If not defined the code will\n    compute the range while plotting the data.\n- yscale: {'linear','log'}, default 'linear'\n    If enabled (and different from True), sets automatically the scale\n    on the y-axis. Data in log scale should be used with the keyword\n    'log', while data in linear scale should be used with the keyword\n    'linear'.\n- yticks: {[float], None, True}, default True\n    If enabled (and different from True), sets manually ticks on\n    y-axis. In order to completely remove the ticks the keyword should\n    be used with None.\n- ytickslabels: {[str], None, True}, default True\n    If enabled (and different from True), sets manually the ticks\n    labels on the y-axis. In order to completely remove the ticks the\n    keyword should be used with None. Note that fixed tickslabels should\n    always correspond to fixed ticks.\n- ytitle: str, default None\n    Sets and places the label of the y-axis.\n\n----\n\nExamples\n--------\n- Example #1: Plot a contour plot of a variable\n\n    >>> I.contour(D.rho, levels=10)"
  }
]