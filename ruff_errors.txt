Src/pyPLUTO/readpart.py:85:70: F821 Undefined name `l`
   |
83 |         # Find the variable names
84 |         elif spl1 == b"field_names":
85 |             self._d_info["varskeys"][i] = [elem.decode() for elem in l.split()[2:]]
   |                                                                      ^ F821
86 |             self._d_info["varslist"][i] = ["tot"]
   |

Src/pyPLUTO/readpart.py:90:69: F821 Undefined name `l`
   |
88 |         # Find the variable dimensions
89 |         elif spl1 == b"field_dim":
90 |             self._vardim = np.array([int(elem.decode()) for elem in l.split()[2:]])
   |                                                                     ^ F821
91 |             self._offset["tot"] = f.tell()
92 |             self._shape["tot"] = (self.nshp, np.sum(self._vardim))
   |

Src/pyPLUTO/setaxes.py:1:1: F403 `from .libraries import *` used; unable to detect undefined names
  |
1 | from .libraries import *
  | ^^^^^^^^^^^^^^^^^^^^^^^^ F403
  |

Src/pyPLUTO/setaxes.py:5:71: F405 `Any` may be undefined, or defined from star imports
  |
4 | def create_axes(
5 |     self, ncol: int = 1, nrow: int = 1, check: bool = True, **kwargs: Any
  |                                                                       ^^^ F405
6 | ) -> Axes:
7 |     """
  |

Src/pyPLUTO/setaxes.py:6:6: F405 `Axes` may be undefined, or defined from star imports
  |
4 | def create_axes(
5 |     self, ncol: int = 1, nrow: int = 1, check: bool = True, **kwargs: Any
6 | ) -> Axes:
  |      ^^^^ F405
7 |     """
8 |     Creation of a set of axes using add_subplot from the matplotlib library.
  |

Src/pyPLUTO/setaxes.py:139:9: F405 `check_par` may be undefined, or defined from star imports
    |
137 |     }
138 |     if check is True:
139 |         check_par(param, "create_axes", **kwargs)
    |         ^^^^^^^^^ F405
140 |
141 |     # Change fontsize if requested
    |

Src/pyPLUTO/setaxes.py:143:9: F405 `plt` may be undefined, or defined from star imports
    |
141 |     # Change fontsize if requested
142 |     if "fontsize" in kwargs:
143 |         plt.rcParams.update({"font.size": kwargs["fontsize"]})
    |         ^^^ F405
144 |
145 |     # Set of custom plot keywords
    |

Src/pyPLUTO/setaxes.py:190:18: F405 `islice` may be undefined, or defined from star imports
    |
189 |         # Computes left, right of every ax
190 |         for i in islice(range(ncol), ncol - 1):
    |                  ^^^^^^ F405
191 |             rr = wsize * wratio[i] / wtot
192 |             wplot.append([ll, rr])
    |

Src/pyPLUTO/setaxes.py:196:18: F405 `islice` may be undefined, or defined from star imports
    |
195 |         # Computes top, bottom of every ax
196 |         for i in islice(range(nrow), nrow - 1):
    |                  ^^^^^^ F405
197 |             bb = tt - hsize * hratio[i] / htot
198 |             hplot.append([bb, tt - bb])
    |

Src/pyPLUTO/setaxes.py:219:14: E714 [*] Test for object identity should be `is not`
    |
217 |         self.figsize = kwargs["figsize"]
218 |     # Set the figure size if not custom plot
219 |     elif not custom_plot is True and self._set_size is False:
    |              ^^^^^^^^^^^^^^^^^^^ E714
220 |         self.fig.set_figwidth(6 * np.sqrt(ncol))
221 |         self.fig.set_figheight(5 * np.sqrt(nrow))
    |
    = help: Convert to `is not`

Src/pyPLUTO/setaxes.py:220:35: F405 `np` may be undefined, or defined from star imports
    |
218 |     # Set the figure size if not custom plot
219 |     elif not custom_plot is True and self._set_size is False:
220 |         self.fig.set_figwidth(6 * np.sqrt(ncol))
    |                                   ^^ F405
221 |         self.fig.set_figheight(5 * np.sqrt(nrow))
    |

Src/pyPLUTO/setaxes.py:221:36: F405 `np` may be undefined, or defined from star imports
    |
219 |     elif not custom_plot is True and self._set_size is False:
220 |         self.fig.set_figwidth(6 * np.sqrt(ncol))
221 |         self.fig.set_figheight(5 * np.sqrt(nrow))
    |                                    ^^ F405
222 |
223 |     # Set the projection if requested
    |

Src/pyPLUTO/setaxes.py:257:33: F405 `Axes` may be undefined, or defined from star imports
    |
255 |         if sharex is True and i > 0:
256 |             self.ax[-1].sharex(self.ax[0])
257 |         elif isinstance(sharex, Axes):
    |                                 ^^^^ F405
258 |             self.ax[-1].sharex(sharex)
259 |         if sharey is True and i > 0:
    |

Src/pyPLUTO/setaxes.py:261:33: F405 `Axes` may be undefined, or defined from star imports
    |
259 |         if sharey is True and i > 0:
260 |             self.ax[-1].sharey(self.ax[0])
261 |         elif isinstance(sharey, Axes):
    |                                 ^^^^ F405
262 |             self.ax[-1].sharey(sharey)
    |

Src/pyPLUTO/setaxes.py:285:24: F405 `Axes` may be undefined, or defined from star imports
    |
285 | def set_axis(self, ax: Axes | None = None, check: bool = True, **kwargs: Any) -> None:
    |                        ^^^^ F405
286 |     """
287 |     Customization of a single subplot axis.
    |

Src/pyPLUTO/setaxes.py:285:74: F405 `Any` may be undefined, or defined from star imports
    |
285 | def set_axis(self, ax: Axes | None = None, check: bool = True, **kwargs: Any) -> None:
    |                                                                          ^^^ F405
286 |     """
287 |     Customization of a single subplot axis.
    |

Src/pyPLUTO/setaxes.py:451:9: F405 `check_par` may be undefined, or defined from star imports
    |
449 |     }
450 |     if check is True:
451 |         check_par(param, "set_axis", **kwargs)
    |         ^^^^^^^^^ F405
452 |
453 |     # Take last axis if not specified
    |

Src/pyPLUTO/setaxes.py:458:5: F405 `plt` may be undefined, or defined from star imports
    |
456 |     # Set fontsize
457 |     self.fontsize = kwargs.get("fontsize", self.fontsize)
458 |     plt.rcParams.update({"font.size": self.fontsize})
    |     ^^^ F405
459 |
460 |     # Set aspect ratio
    |

Src/pyPLUTO/setaxes.py:614:16: F405 `makelist` may be undefined, or defined from star imports
    |
612 |     # Check if space is a list
613 |     # IF FLOAT MAKE IT LIST WITH THE VALUE!!!
614 |     newspace = makelist(space)
    |                ^^^^^^^^ F405
615 |     space = space if isinstance(space, list) else newspace * (length - 1)
    |

Src/pyPLUTO/setaxes.py:623:9: F405 `warnings` may be undefined, or defined from star imports
    |
621 |     # Check if the lists have the correct length
622 |     if len(ratio) != length:
623 |         warnings.warn(f"WARNING! {rat[func]} has wrong length!", UserWarning)
    |         ^^^^^^^^ F405
624 |     if len(space) + 1 != length:
625 |         warnings.warn(f"WARNING! {spc[func]} has wrong length!", UserWarning)
    |

Src/pyPLUTO/setaxes.py:625:9: F405 `warnings` may be undefined, or defined from star imports
    |
623 |         warnings.warn(f"WARNING! {rat[func]} has wrong length!", UserWarning)
624 |     if len(space) + 1 != length:
625 |         warnings.warn(f"WARNING! {spc[func]} has wrong length!", UserWarning)
    |         ^^^^^^^^ F405
626 |
627 |     # End of the function. Return the lists
    |

Src/pyPLUTO/setaxes.py:632:9: F405 `Axes` may be undefined, or defined from star imports
    |
631 | def _set_ticks(
632 |     ax: Axes,
    |         ^^^^ F405
633 |     tc: str | list[float] | None,
634 |     tl: str | list[str] | None,
    |

Src/pyPLUTO/setaxes.py:693:13: F405 `warnings` may be undefined, or defined from star imports
    |
691 |         if tl is not None and tl is not True:
692 |             warn = "Warning, tickslabels are defined with no" "ticks!! (function setax)"
693 |             warnings.warn(warn, UserWarning)
    |             ^^^^^^^^ F405
694 |
695 |     # Ticks are not None and tickslabels are custom
    |

Src/pyPLUTO/setaxes.py:708:13: F405 `warnings` may be undefined, or defined from star imports
    |
706 |                 "when ticks are fixed (function setax)"
707 |             )
708 |             warnings.warn(warn, UserWarning)
    |             ^^^^^^^^ F405
709 |
710 |         # Ticks are set custom, then tickslabels are set
    |

Src/pyPLUTO/transform.py:1:1: F403 `from .libraries import *` used; unable to detect undefined names
  |
1 | from .libraries import *
  | ^^^^^^^^^^^^^^^^^^^^^^^^ F403
  |

Src/pyPLUTO/transform.py:6:10: F405 `NDArray` may be undefined, or defined from star imports
  |
4 | def slices(
5 |     self,
6 |     var: NDArray,
  |          ^^^^^^^ F405
7 |     check: bool = True,
8 |     diag: bool | None = None,
  |

Src/pyPLUTO/transform.py:12:15: F405 `Any` may be undefined, or defined from star imports
   |
10 |     x2: int | list | None = None,
11 |     x3: int | list | None = None,
12 |     **kwargs: Any,
   |               ^^^ F405
13 | ) -> np.ndarray:
14 |     """
   |

Src/pyPLUTO/transform.py:13:6: F405 `np` may be undefined, or defined from star imports
   |
11 |     x3: int | list | None = None,
12 |     **kwargs: Any,
13 | ) -> np.ndarray:
   |      ^^ F405
14 |     """
15 |     Function that slices the variable in the 3 directions.
   |

Src/pyPLUTO/transform.py:74:9: F405 `check_par` may be undefined, or defined from star imports
   |
72 |     param = {"axis1", "axis2", "offset"}
73 |     if check is True:
74 |         check_par(param, "slice", **kwargs)
   |         ^^^^^^^^^ F405
75 |
76 |     # Make a copy to not modify the variable
   |

Src/pyPLUTO/transform.py:77:14: F405 `np` may be undefined, or defined from star imports
   |
76 |     # Make a copy to not modify the variable
77 |     newvar = np.copy(var)
   |              ^^ F405
78 |
79 |     # Slice the diagonal
   |

Src/pyPLUTO/transform.py:82:22: F405 `np` may be undefined, or defined from star imports
   |
80 |     if diag is not None:
81 |         if diag == "min":
82 |             newvar = np.diagonal(np.flipud(newvar), **kwargs)
   |                      ^^ F405
83 |         else:
84 |             newvar = np.diagonal(newvar, **kwargs)
   |

Src/pyPLUTO/transform.py:82:34: F405 `np` may be undefined, or defined from star imports
   |
80 |     if diag is not None:
81 |         if diag == "min":
82 |             newvar = np.diagonal(np.flipud(newvar), **kwargs)
   |                                  ^^ F405
83 |         else:
84 |             newvar = np.diagonal(newvar, **kwargs)
   |

Src/pyPLUTO/transform.py:84:22: F405 `np` may be undefined, or defined from star imports
   |
82 |             newvar = np.diagonal(np.flipud(newvar), **kwargs)
83 |         else:
84 |             newvar = np.diagonal(newvar, **kwargs)
   |                      ^^ F405
85 |
86 |     # Slice 3rd direction
   |

Src/pyPLUTO/transform.py:102:23: F405 `NDArray` may be undefined, or defined from star imports
    |
102 | def mirror(self, var: NDArray, dirs="l", xax=None, yax=None) -> list[np.ndarray]:
    |                       ^^^^^^^ F405
103 |     """
104 |     Function that mirrors the variable in the specified directions.
    |

Src/pyPLUTO/transform.py:102:70: F405 `np` may be undefined, or defined from star imports
    |
102 | def mirror(self, var: NDArray, dirs="l", xax=None, yax=None) -> list[np.ndarray]:
    |                                                                      ^^ F405
103 |     """
104 |     Function that mirrors the variable in the specified directions.
    |

Src/pyPLUTO/transform.py:163:24: F405 `np` may be undefined, or defined from star imports
    |
162 |     spp = [*dirs] if not isinstance(dirs, list) else dirs
163 |     newvar, axx, axy = np.copy(var), np.copy(xax), np.copy(yax)
    |                        ^^ F405
164 |     dim = np.ndim(var) - 1
165 |     if dim > 1:
    |

Src/pyPLUTO/transform.py:163:38: F405 `np` may be undefined, or defined from star imports
    |
162 |     spp = [*dirs] if not isinstance(dirs, list) else dirs
163 |     newvar, axx, axy = np.copy(var), np.copy(xax), np.copy(yax)
    |                                      ^^ F405
164 |     dim = np.ndim(var) - 1
165 |     if dim > 1:
    |

Src/pyPLUTO/transform.py:163:52: F405 `np` may be undefined, or defined from star imports
    |
162 |     spp = [*dirs] if not isinstance(dirs, list) else dirs
163 |     newvar, axx, axy = np.copy(var), np.copy(xax), np.copy(yax)
    |                                                    ^^ F405
164 |     dim = np.ndim(var) - 1
165 |     if dim > 1:
    |

Src/pyPLUTO/transform.py:164:11: F405 `np` may be undefined, or defined from star imports
    |
162 |     spp = [*dirs] if not isinstance(dirs, list) else dirs
163 |     newvar, axx, axy = np.copy(var), np.copy(xax), np.copy(yax)
164 |     dim = np.ndim(var) - 1
    |           ^^ F405
165 |     if dim > 1:
166 |         raise ValueError("Mirror function does not works for 3D arrays")
    |

Src/pyPLUTO/transform.py:177:18: F405 `np` may be undefined, or defined from star imports
    |
175 |             "b": [(lvy, 0), ((0, 0), (lvy, 0))],
176 |         }
177 |         newvar = np.pad(newvar, choices[dir][dim], "symmetric")
    |                  ^^ F405
178 |         if xax is not None and dir in {"l", "r"}:
179 |             axx = np.pad(axx, choices[dir][0], "reflect", reflect_type="odd")
    |

Src/pyPLUTO/transform.py:179:19: F405 `np` may be undefined, or defined from star imports
    |
177 |         newvar = np.pad(newvar, choices[dir][dim], "symmetric")
178 |         if xax is not None and dir in {"l", "r"}:
179 |             axx = np.pad(axx, choices[dir][0], "reflect", reflect_type="odd")
    |                   ^^ F405
180 |         if yax is not None and dir in {"t", "b"}:
181 |             axy = np.pad(axy, choices[dir][0], "reflect", reflect_type="odd")
    |

Src/pyPLUTO/transform.py:181:19: F405 `np` may be undefined, or defined from star imports
    |
179 |             axx = np.pad(axx, choices[dir][0], "reflect", reflect_type="odd")
180 |         if yax is not None and dir in {"t", "b"}:
181 |             axy = np.pad(axy, choices[dir][0], "reflect", reflect_type="odd")
    |                   ^^ F405
182 |     xax is not None and nax.append(axx)
183 |     yax is not None and nax.append(axy)
    |

Src/pyPLUTO/transform.py:194:10: F405 `NDArray` may be undefined, or defined from star imports
    |
192 | def repeat(
193 |     self,
194 |     var: NDArray,
    |          ^^^^^^^ F405
195 |     dirs: str | list,
196 |     xax: NDArray | None = None,
    |

Src/pyPLUTO/transform.py:196:10: F405 `NDArray` may be undefined, or defined from star imports
    |
194 |     var: NDArray,
195 |     dirs: str | list,
196 |     xax: NDArray | None = None,
    |          ^^^^^^^ F405
197 |     yax: NDArray | None = None,
198 | ) -> np.ndarray:
    |

Src/pyPLUTO/transform.py:197:10: F405 `NDArray` may be undefined, or defined from star imports
    |
195 |     dirs: str | list,
196 |     xax: NDArray | None = None,
197 |     yax: NDArray | None = None,
    |          ^^^^^^^ F405
198 | ) -> np.ndarray:
199 |     """
    |

Src/pyPLUTO/transform.py:198:6: F405 `np` may be undefined, or defined from star imports
    |
196 |     xax: NDArray | None = None,
197 |     yax: NDArray | None = None,
198 | ) -> np.ndarray:
    |      ^^ F405
199 |     """
200 |     Function that repeats the variable in the specified directions.
    |

Src/pyPLUTO/transform.py:253:24: F405 `np` may be undefined, or defined from star imports
    |
252 |     spp = [*dirs] if not isinstance(dirs, list) else dirs
253 |     newvar, axx, axy = np.copy(var), np.copy(xax), np.copy(yax)
    |                        ^^ F405
254 |
255 |     for dir in spp:
    |

Src/pyPLUTO/transform.py:253:38: F405 `np` may be undefined, or defined from star imports
    |
252 |     spp = [*dirs] if not isinstance(dirs, list) else dirs
253 |     newvar, axx, axy = np.copy(var), np.copy(xax), np.copy(yax)
    |                                      ^^ F405
254 |
255 |     for dir in spp:
    |

Src/pyPLUTO/transform.py:253:52: F405 `np` may be undefined, or defined from star imports
    |
252 |     spp = [*dirs] if not isinstance(dirs, list) else dirs
253 |     newvar, axx, axy = np.copy(var), np.copy(xax), np.copy(yax)
    |                                                    ^^ F405
254 |
255 |     for dir in spp:
    |

Src/pyPLUTO/transform.py:264:18: F405 `np` may be undefined, or defined from star imports
    |
262 |             "b": [(lvy, 0), ((0, 0), (lvy, 0))],
263 |         }
264 |         newvar = np.pad(newvar, choices[dir][1], "wrap")
    |                  ^^ F405
265 |         if xax is not None and dir in {"l", "r"}:
266 |             axx = np.pad(axx, choices[dir][0], "wrap")
    |

Src/pyPLUTO/transform.py:266:19: F405 `np` may be undefined, or defined from star imports
    |
264 |         newvar = np.pad(newvar, choices[dir][1], "wrap")
265 |         if xax is not None and dir in {"l", "r"}:
266 |             axx = np.pad(axx, choices[dir][0], "wrap")
    |                   ^^ F405
267 |         if yax is not None and dir in {"t", "b"}:
268 |             axy = np.pad(axy, choices[dir][0], "wrap")
    |

Src/pyPLUTO/transform.py:268:19: F405 `np` may be undefined, or defined from star imports
    |
266 |             axx = np.pad(axx, choices[dir][0], "wrap")
267 |         if yax is not None and dir in {"t", "b"}:
268 |             axy = np.pad(axy, choices[dir][0], "wrap")
    |                   ^^ F405
269 |
270 |     if xax is not None and yax is not None:
    |

Src/pyPLUTO/transform.py:281:45: F405 `Any` may be undefined, or defined from star imports
    |
280 | def cartesian_vector(
281 |     self, var: str | None = None, **kwargs: Any
    |                                             ^^^ F405
282 | ) -> tuple[NDArray, ...]:
283 |     """
    |

Src/pyPLUTO/transform.py:282:12: F405 `NDArray` may be undefined, or defined from star imports
    |
280 | def cartesian_vector(
281 |     self, var: str | None = None, **kwargs: Any
282 | ) -> tuple[NDArray, ...]:
    |            ^^^^^^^ F405
283 |     """
284 |     Function that converts a vector from spherical or polar components to
    |

Src/pyPLUTO/transform.py:350:5: F841 Local variable `x1` is assigned to but never used
    |
348 |         var_0.append(self.check_var(kwargs["var3"], kwargs.get("transpose", False)))
349 |
350 |     x1 = kwargs.get("x1", self.x1)
    |     ^^ F841
351 |     x2 = kwargs.get("x2", self.x2)
352 |     x3 = kwargs.get("x3", self.x3)
    |
    = help: Remove assignment to unused variable `x1`

Src/pyPLUTO/transform.py:355:27: F405 `np` may be undefined, or defined from star imports
    |
354 |     if self.geom == "SPHERICAL":
355 |         varr = var_0[0] * np.sin(x2) + var_0[1] * np.cos(x2)
    |                           ^^ F405
356 |         varz = var_0[0] * np.cos(x2) - var_0[1] * np.sin(x2)
357 |         if self.dim == 3:
    |

Src/pyPLUTO/transform.py:355:51: F405 `np` may be undefined, or defined from star imports
    |
354 |     if self.geom == "SPHERICAL":
355 |         varr = var_0[0] * np.sin(x2) + var_0[1] * np.cos(x2)
    |                                                   ^^ F405
356 |         varz = var_0[0] * np.cos(x2) - var_0[1] * np.sin(x2)
357 |         if self.dim == 3:
    |

Src/pyPLUTO/transform.py:356:27: F405 `np` may be undefined, or defined from star imports
    |
354 |     if self.geom == "SPHERICAL":
355 |         varr = var_0[0] * np.sin(x2) + var_0[1] * np.cos(x2)
356 |         varz = var_0[0] * np.cos(x2) - var_0[1] * np.sin(x2)
    |                           ^^ F405
357 |         if self.dim == 3:
358 |             varx = varr * np.cos(x3) - var_0[2] * np.sin(x3)
    |

Src/pyPLUTO/transform.py:356:51: F405 `np` may be undefined, or defined from star imports
    |
354 |     if self.geom == "SPHERICAL":
355 |         varr = var_0[0] * np.sin(x2) + var_0[1] * np.cos(x2)
356 |         varz = var_0[0] * np.cos(x2) - var_0[1] * np.sin(x2)
    |                                                   ^^ F405
357 |         if self.dim == 3:
358 |             varx = varr * np.cos(x3) - var_0[2] * np.sin(x3)
    |

Src/pyPLUTO/transform.py:358:27: F405 `np` may be undefined, or defined from star imports
    |
356 |         varz = var_0[0] * np.cos(x2) - var_0[1] * np.sin(x2)
357 |         if self.dim == 3:
358 |             varx = varr * np.cos(x3) - var_0[2] * np.sin(x3)
    |                           ^^ F405
359 |             vary = varr * np.sin(x3) + var_0[2] * np.cos(x3)
360 |             if kwargs.get("fullout", False):
    |

Src/pyPLUTO/transform.py:358:51: F405 `np` may be undefined, or defined from star imports
    |
356 |         varz = var_0[0] * np.cos(x2) - var_0[1] * np.sin(x2)
357 |         if self.dim == 3:
358 |             varx = varr * np.cos(x3) - var_0[2] * np.sin(x3)
    |                                                   ^^ F405
359 |             vary = varr * np.sin(x3) + var_0[2] * np.cos(x3)
360 |             if kwargs.get("fullout", False):
    |

Src/pyPLUTO/transform.py:359:27: F405 `np` may be undefined, or defined from star imports
    |
357 |         if self.dim == 3:
358 |             varx = varr * np.cos(x3) - var_0[2] * np.sin(x3)
359 |             vary = varr * np.sin(x3) + var_0[2] * np.cos(x3)
    |                           ^^ F405
360 |             if kwargs.get("fullout", False):
361 |                 return varx, vary, varz, varr
    |

Src/pyPLUTO/transform.py:359:51: F405 `np` may be undefined, or defined from star imports
    |
357 |         if self.dim == 3:
358 |             varx = varr * np.cos(x3) - var_0[2] * np.sin(x3)
359 |             vary = varr * np.sin(x3) + var_0[2] * np.cos(x3)
    |                                                   ^^ F405
360 |             if kwargs.get("fullout", False):
361 |                 return varx, vary, varz, varr
    |

Src/pyPLUTO/transform.py:368:27: F405 `np` may be undefined, or defined from star imports
    |
367 |     elif self.geom == "POLAR":
368 |         varx = var_0[0] * np.cos(x2) - var_0[1] * np.sin(x2)
    |                           ^^ F405
369 |         vary = var_0[0] * np.sin(x2) + var_0[1] * np.cos(x2)
370 |         return varx, vary
    |

Src/pyPLUTO/transform.py:368:51: F405 `np` may be undefined, or defined from star imports
    |
367 |     elif self.geom == "POLAR":
368 |         varx = var_0[0] * np.cos(x2) - var_0[1] * np.sin(x2)
    |                                                   ^^ F405
369 |         vary = var_0[0] * np.sin(x2) + var_0[1] * np.cos(x2)
370 |         return varx, vary
    |

Src/pyPLUTO/transform.py:369:27: F405 `np` may be undefined, or defined from star imports
    |
367 |     elif self.geom == "POLAR":
368 |         varx = var_0[0] * np.cos(x2) - var_0[1] * np.sin(x2)
369 |         vary = var_0[0] * np.sin(x2) + var_0[1] * np.cos(x2)
    |                           ^^ F405
370 |         return varx, vary
    |

Src/pyPLUTO/transform.py:369:51: F405 `np` may be undefined, or defined from star imports
    |
367 |     elif self.geom == "POLAR":
368 |         varx = var_0[0] * np.cos(x2) - var_0[1] * np.sin(x2)
369 |         vary = var_0[0] * np.sin(x2) + var_0[1] * np.cos(x2)
    |                                                   ^^ F405
370 |         return varx, vary
    |

Src/pyPLUTO/transform.py:373:36: F405 `Any` may be undefined, or defined from star imports
    |
373 | def reshape_cartesian(self, *args: Any, **kwargs: Any) -> tuple[NDArray, ...]:
    |                                    ^^^ F405
374 |     """
375 |     Function that reshapes a variable from a cylindrical or spherical grid into
    |

Src/pyPLUTO/transform.py:373:51: F405 `Any` may be undefined, or defined from star imports
    |
373 | def reshape_cartesian(self, *args: Any, **kwargs: Any) -> tuple[NDArray, ...]:
    |                                                   ^^^ F405
374 |     """
375 |     Function that reshapes a variable from a cylindrical or spherical grid into
    |

Src/pyPLUTO/transform.py:373:65: F405 `NDArray` may be undefined, or defined from star imports
    |
373 | def reshape_cartesian(self, *args: Any, **kwargs: Any) -> tuple[NDArray, ...]:
    |                                                                 ^^^^^^^ F405
374 |     """
375 |     Function that reshapes a variable from a cylindrical or spherical grid into
    |

Src/pyPLUTO/transform.py:434:16: F405 `np` may be undefined, or defined from star imports
    |
433 |     # Get the grid limits
434 |     xx = x1[:, np.newaxis] * np.cos(x2)
    |                ^^ F405
435 |     yy = x1[:, np.newaxis] * np.sin(x2)
    |

Src/pyPLUTO/transform.py:434:30: F405 `np` may be undefined, or defined from star imports
    |
433 |     # Get the grid limits
434 |     xx = x1[:, np.newaxis] * np.cos(x2)
    |                              ^^ F405
435 |     yy = x1[:, np.newaxis] * np.sin(x2)
    |

Src/pyPLUTO/transform.py:435:16: F405 `np` may be undefined, or defined from star imports
    |
433 |     # Get the grid limits
434 |     xx = x1[:, np.newaxis] * np.cos(x2)
435 |     yy = x1[:, np.newaxis] * np.sin(x2)
    |                ^^ F405
436 |
437 |     xmin, xmax = xx.min(), xx.max()
    |

Src/pyPLUTO/transform.py:435:30: F405 `np` may be undefined, or defined from star imports
    |
433 |     # Get the grid limits
434 |     xx = x1[:, np.newaxis] * np.cos(x2)
435 |     yy = x1[:, np.newaxis] * np.sin(x2)
    |                              ^^ F405
436 |
437 |     xmin, xmax = xx.min(), xx.max()
    |

Src/pyPLUTO/transform.py:450:15: F405 `np` may be undefined, or defined from star imports
    |
449 |     if self.geom == "SPHERICAL":
450 |         xc0 = np.linspace(xmin, xmax, nx2)
    |               ^^ F405
451 |         yc0 = np.linspace(ymin, ymax, nx1)
452 |         xc, yc = np.meshgrid(xc0, yc0, indexing="xy")
    |

Src/pyPLUTO/transform.py:451:15: F405 `np` may be undefined, or defined from star imports
    |
449 |     if self.geom == "SPHERICAL":
450 |         xc0 = np.linspace(xmin, xmax, nx2)
451 |         yc0 = np.linspace(ymin, ymax, nx1)
    |               ^^ F405
452 |         xc, yc = np.meshgrid(xc0, yc0, indexing="xy")
453 |     else:
    |

Src/pyPLUTO/transform.py:452:18: F405 `np` may be undefined, or defined from star imports
    |
450 |         xc0 = np.linspace(xmin, xmax, nx2)
451 |         yc0 = np.linspace(ymin, ymax, nx1)
452 |         xc, yc = np.meshgrid(xc0, yc0, indexing="xy")
    |                  ^^ F405
453 |     else:
454 |         xc0 = np.linspace(xmin, xmax, nx1)
    |

Src/pyPLUTO/transform.py:454:15: F405 `np` may be undefined, or defined from star imports
    |
452 |         xc, yc = np.meshgrid(xc0, yc0, indexing="xy")
453 |     else:
454 |         xc0 = np.linspace(xmin, xmax, nx1)
    |               ^^ F405
455 |         yc0 = np.linspace(ymin, ymax, nx2)
456 |         xc, yc = np.meshgrid(xc0, yc0, indexing="ij")
    |

Src/pyPLUTO/transform.py:455:15: F405 `np` may be undefined, or defined from star imports
    |
453 |     else:
454 |         xc0 = np.linspace(xmin, xmax, nx1)
455 |         yc0 = np.linspace(ymin, ymax, nx2)
    |               ^^ F405
456 |         xc, yc = np.meshgrid(xc0, yc0, indexing="ij")
    |

Src/pyPLUTO/transform.py:456:18: F405 `np` may be undefined, or defined from star imports
    |
454 |         xc0 = np.linspace(xmin, xmax, nx1)
455 |         yc0 = np.linspace(ymin, ymax, nx2)
456 |         xc, yc = np.meshgrid(xc0, yc0, indexing="ij")
    |                  ^^ F405
457 |
458 |     # Create the new grid
    |

Src/pyPLUTO/transform.py:468:21: F405 `np` may be undefined, or defined from star imports
    |
467 |     for i, var in enumerate(vars):
468 |         newv.append(np.sum([ww[j] * var.flat[nn[j]] for j in range(4)], axis=0))
    |                     ^^ F405
469 |         newv[i] = self._congrid(newv[i], (nx1, nx2), method="linear")
    |

Src/pyPLUTO/transform.py:518:21: F405 `np` may be undefined, or defined from star imports
    |
517 |     """
518 |     uniform_x = all(np.diff(x1) == np.diff(x1)[0])
    |                     ^^ F405
519 |     uniform_y = all(np.diff(x2) == np.diff(x2)[0])
    |

Src/pyPLUTO/transform.py:518:36: F405 `np` may be undefined, or defined from star imports
    |
517 |     """
518 |     uniform_x = all(np.diff(x1) == np.diff(x1)[0])
    |                                    ^^ F405
519 |     uniform_y = all(np.diff(x2) == np.diff(x2)[0])
    |

Src/pyPLUTO/transform.py:519:21: F405 `np` may be undefined, or defined from star imports
    |
517 |     """
518 |     uniform_x = all(np.diff(x1) == np.diff(x1)[0])
519 |     uniform_y = all(np.diff(x2) == np.diff(x2)[0])
    |                     ^^ F405
520 |
521 |     nx1new = kwargs.get("nx1", len(x1))
    |

Src/pyPLUTO/transform.py:519:36: F405 `np` may be undefined, or defined from star imports
    |
517 |     """
518 |     uniform_x = all(np.diff(x1) == np.diff(x1)[0])
519 |     uniform_y = all(np.diff(x2) == np.diff(x2)[0])
    |                                    ^^ F405
520 |
521 |     nx1new = kwargs.get("nx1", len(x1))
    |

Src/pyPLUTO/transform.py:531:17: F405 `np` may be undefined, or defined from star imports
    |
529 |     if not uniform_x or not uniform_y:
530 |
531 |         x1new = np.linspace(x1.min(), x1.max(), nx1new) if not uniform_x else x1
    |                 ^^ F405
532 |         x2new = np.linspace(x2.min(), x2.max(), nx2new) if not uniform_y else x2
    |

Src/pyPLUTO/transform.py:532:17: F405 `np` may be undefined, or defined from star imports
    |
531 |         x1new = np.linspace(x1.min(), x1.max(), nx1new) if not uniform_x else x1
532 |         x2new = np.linspace(x2.min(), x2.max(), nx2new) if not uniform_y else x2
    |                 ^^ F405
533 |
534 |         for i in args:
    |

Src/pyPLUTO/transform.py:535:22: F405 `RectBivariateSpline` may be undefined, or defined from star imports
    |
534 |         for i in args:
535 |             interp = RectBivariateSpline(x2, x1, i.T)
    |                      ^^^^^^^^^^^^^^^^^^^ F405
536 |             newvars.append(interp(x2new, x1new))
    |

Src/pyPLUTO/transform.py:586:10: F405 `np` may be undefined, or defined from star imports
    |
585 |     # Convert Cartesian coordinates (R, Z) to polar (Rs, Th)
586 |     Rs = np.sqrt(R**2 + Z**2)
    |          ^^ F405
587 |
588 |     Th = np.arctan2(Z, R)
    |

Src/pyPLUTO/transform.py:588:10: F405 `np` may be undefined, or defined from star imports
    |
586 |     Rs = np.sqrt(R**2 + Z**2)
587 |
588 |     Th = np.arctan2(Z, R)
    |          ^^ F405
589 |     Th = np.where(Th < 0, Th + 2 * np.pi, Th)  # Ensure Th is in [0, 2pi]
    |

Src/pyPLUTO/transform.py:589:10: F405 `np` may be undefined, or defined from star imports
    |
588 |     Th = np.arctan2(Z, R)
589 |     Th = np.where(Th < 0, Th + 2 * np.pi, Th)  # Ensure Th is in [0, 2pi]
    |          ^^ F405
590 |
591 |     # Clip Rs and Th to the range of the new grid
    |

Src/pyPLUTO/transform.py:589:36: F405 `np` may be undefined, or defined from star imports
    |
588 |     Th = np.arctan2(Z, R)
589 |     Th = np.where(Th < 0, Th + 2 * np.pi, Th)  # Ensure Th is in [0, 2pi]
    |                                    ^^ F405
590 |
591 |     # Clip Rs and Th to the range of the new grid
    |

Src/pyPLUTO/transform.py:592:18: F405 `np` may be undefined, or defined from star imports
    |
591 |     # Clip Rs and Th to the range of the new grid
592 |     Rs_clipped = np.clip(Rs, new_r[0], new_r[-1])
    |                  ^^ F405
593 |     Th_clipped = np.clip(Th, new_t[0], new_t[-1])
    |

Src/pyPLUTO/transform.py:593:18: F405 `np` may be undefined, or defined from star imports
    |
591 |     # Clip Rs and Th to the range of the new grid
592 |     Rs_clipped = np.clip(Rs, new_r[0], new_r[-1])
593 |     Th_clipped = np.clip(Th, new_t[0], new_t[-1])
    |                  ^^ F405
594 |
595 |     # Normalize Rs and Th to the new grid indices
    |

Src/pyPLUTO/transform.py:600:15: F405 `np` may be undefined, or defined from star imports
    |
599 |     # Get the integer and fractional parts of the grid indices
600 |     rn, dra = np.divmod(ra, 1)
    |               ^^ F405
601 |     thn, dtha = np.divmod(tha, 1)
602 |     rn, thn = rn.astype(int), thn.astype(int)
    |

Src/pyPLUTO/transform.py:601:17: F405 `np` may be undefined, or defined from star imports
    |
599 |     # Get the integer and fractional parts of the grid indices
600 |     rn, dra = np.divmod(ra, 1)
601 |     thn, dtha = np.divmod(tha, 1)
    |                 ^^ F405
602 |     rn, thn = rn.astype(int), thn.astype(int)
    |

Src/pyPLUTO/transform.py:605:10: F405 `np` may be undefined, or defined from star imports
    |
604 |     # Ensure indices are within bounds
605 |     rn = np.clip(rn, 0, len(new_r) - 2)
    |          ^^ F405
606 |     thn = np.clip(thn, 0, len(new_t) - 2)
    |

Src/pyPLUTO/transform.py:606:11: F405 `np` may be undefined, or defined from star imports
    |
604 |     # Ensure indices are within bounds
605 |     rn = np.clip(rn, 0, len(new_r) - 2)
606 |     thn = np.clip(thn, 0, len(new_t) - 2)
    |           ^^ F405
607 |
608 |     # Bilinear interpolation
    |

Src/pyPLUTO/transform.py:667:15: F405 `np` may be undefined, or defined from star imports
    |
665 |     a = a.astype(float, copy=False)
666 |
667 |     olddims = np.array(a.shape)
    |               ^^ F405
668 |     newdims = np.asarray(newdims, dtype=int)
    |

Src/pyPLUTO/transform.py:668:15: F405 `np` may be undefined, or defined from star imports
    |
667 |     olddims = np.array(a.shape)
668 |     newdims = np.asarray(newdims, dtype=int)
    |               ^^ F405
669 |
670 |     if olddims.size != newdims.size:
    |

Src/pyPLUTO/transform.py:680:17: F405 `np` may be undefined, or defined from star imports
    |
679 |     # Generate the original grid
680 |     old_grid = [np.arange(n) for n in olddims]
    |                 ^^ F405
681 |
682 |     # Generate the new grid, scaled to match the new dimensions
    |

Src/pyPLUTO/transform.py:683:16: F405 `np` may be undefined, or defined from star imports
    |
682 |     # Generate the new grid, scaled to match the new dimensions
683 |     new_grid = np.meshgrid(
    |                ^^ F405
684 |         *[
685 |             np.linspace(ofs, olddims[i] - 1 - ofs, num=newdims[i])
    |

Src/pyPLUTO/transform.py:685:13: F405 `np` may be undefined, or defined from star imports
    |
683 |     new_grid = np.meshgrid(
684 |         *[
685 |             np.linspace(ofs, olddims[i] - 1 - ofs, num=newdims[i])
    |             ^^ F405
686 |             for i in range(len(olddims))
687 |         ],
    |

Src/pyPLUTO/transform.py:692:18: F405 `np` may be undefined, or defined from star imports
    |
691 |     # Stack the coordinates for RegularGridInterpolator
692 |     new_coords = np.stack(new_grid, axis=-1)
    |                  ^^ F405
693 |
694 |     if method == "spline":
    |

Src/pyPLUTO/transform.py:697:18: F405 `np` may be undefined, or defined from star imports
    |
695 |         # Use spline interpolation with map_coordinates
696 |         scale = (olddims - m1) / (newdims - m1)
697 |         coords = np.array(new_grid) * scale[:, None, None]
    |                  ^^ F405
698 |         return map_coordinates(a, coords, order=3, mode="nearest")
    |

Src/pyPLUTO/transform.py:698:16: F405 `map_coordinates` may be undefined, or defined from star imports
    |
696 |         scale = (olddims - m1) / (newdims - m1)
697 |         coords = np.array(new_grid) * scale[:, None, None]
698 |         return map_coordinates(a, coords, order=3, mode="nearest")
    |                ^^^^^^^^^^^^^^^ F405
699 |
700 |     else:
    |

Src/pyPLUTO/transform.py:702:24: F405 `RegularGridInterpolator` may be undefined, or defined from star imports
    |
700 |     else:
701 |         # Use RegularGridInterpolator for 'linear' and 'nearest' methods
702 |         interpolator = RegularGridInterpolator(
    |                        ^^^^^^^^^^^^^^^^^^^^^^^ F405
703 |             old_grid, a, method=method, bounds_error=False, fill_value=None
704 |         )
    |

Src/pyPLUTO/trash.py:3:1: F403 `from .libraries import *` used; unable to detect undefined names
  |
1 | from functools import wraps
2 |
3 | from .libraries import *
  | ^^^^^^^^^^^^^^^^^^^^^^^^ F403
4 |
5 | # Here go all the methods that are not used in the main code
  |

Src/pyPLUTO/write_files.py:1:1: F403 `from .libraries import *` used; unable to detect undefined names
  |
1 | from .libraries import *
  | ^^^^^^^^^^^^^^^^^^^^^^^^ F403
  |

Src/pyPLUTO/write_files.py:6:11: F405 `NDArray` may be undefined, or defined from star imports
  |
4 | def _write_h5(
5 |     self,
6 |     data: NDArray | dict,
  |           ^^^^^^^ F405
7 |     filename: str,
8 |     dataname: str | None = None,
  |

Src/pyPLUTO/write_files.py:10:15: F405 `Any` may be undefined, or defined from star imports
   |
 8 |     dataname: str | None = None,
 9 |     grid: bool = False,
10 |     **kwargs: Any,
   |               ^^^ F405
11 | ) -> None:
12 |     """
   |

Src/pyPLUTO/write_files.py:54:10: F405 `h5py` may be undefined, or defined from star imports
   |
53 |     # Open the HDF5 file
54 |     with h5py.File(path_h5, "w") as f:
   |          ^^^^ F405
55 |
56 |         # Write the data to the HDF5 file
   |

Src/pyPLUTO/write_files.py:271:11: F405 `NDArray` may be undefined, or defined from star imports
    |
269 | def write_file(
270 |     self,
271 |     data: NDArray | dict,
    |           ^^^^^^^ F405
272 |     filename: str,
273 |     datatype: str | None = None,
    |

Src/pyPLUTO/write_files.py:276:15: F405 `Any` may be undefined, or defined from star imports
    |
274 |     dataname: str | None = None,
275 |     grid: bool = False,
276 |     **kwargs: Any,
    |               ^^^ F405
277 | ) -> None:
278 |     """
    |

Src/pyPLUTO/write_files.py:324:9: F405 `warnings` may be undefined, or defined from star imports
    |
322 |     if datatype not in poss_types:
323 |         warn = f"Invalid datatype: {datatype}. Resetting to 'h5'"
324 |         warnings.warn(warn)
    |         ^^^^^^^^ F405
325 |         datatype = "h5"
    |

Src/pyPLUTO/write_files.py:334:9: F405 `warnings` may be undefined, or defined from star imports
    |
332 |             f"Invalid datatype: {datatype}, not implemented yet! " "Resetting to 'h5'"
333 |         )
334 |         warnings.warn(warn)
    |         ^^^^^^^^ F405
335 |         pass
    |

Tests/run_all.py:44:23: F541 [*] f-string without any placeholders
   |
42 |             print(file_path)
43 |             if run_pytest(file_path):
44 |                 print(f" ---> \033[32mPASSED!\033[0m")
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ F541
45 |             else:
46 |                 print(f" ---> \033[31mFAILED!\033[0m")
   |
   = help: Remove extraneous `f` prefix

Tests/run_all.py:46:23: F541 [*] f-string without any placeholders
   |
44 |                 print(f" ---> \033[32mPASSED!\033[0m")
45 |             else:
46 |                 print(f" ---> \033[31mFAILED!\033[0m")
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ F541
   |
   = help: Remove extraneous `f` prefix

Tests/test_im01_initimage.py:2:17: F401 [*] `numpy` imported but unused
  |
1 | import matplotlib as mpl
2 | import numpy as np
  |                 ^^ F401
3 |
4 | import pyPLUTO as pp
  |
  = help: Remove unused import: `numpy`

Tests/test_im01_initimage.py:9:5: E741 Ambiguous variable name: `I`
   |
 7 | # Test the default values of the figure created in the __init__
 8 | def test_default_image():
 9 |     I = pp.Image()
   |     ^ E741
10 |     assert type(I.fig) == mpl.figure.Figure
11 |     assert I.fig.get_figwidth() == 8.0
   |

Tests/test_im01_initimage.py:10:12: E721 Use `is` and `is not` for type comparisons, or `isinstance()` for isinstance checks
   |
 8 | def test_default_image():
 9 |     I = pp.Image()
10 |     assert type(I.fig) == mpl.figure.Figure
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E721
11 |     assert I.fig.get_figwidth() == 8.0
12 |     assert I.fig.get_figheight() == 5.0
   |

Tests/test_im01_initimage.py:13:31: E711 Comparison to `None` should be `cond is None`
   |
11 |     assert I.fig.get_figwidth() == 8.0
12 |     assert I.fig.get_figheight() == 5.0
13 |     assert I.fig._suptitle == None
   |                               ^^^^ E711
14 |     assert I.fontsize == 17
15 |     assert I.fig.get_tight_layout() == False
   |
   = help: Replace with `cond is None`

Tests/test_im01_initimage.py:15:12: E712 Avoid equality comparisons to `False`; use `if not I.fig.get_tight_layout():` for false checks
   |
13 |     assert I.fig._suptitle == None
14 |     assert I.fontsize == 17
15 |     assert I.fig.get_tight_layout() == False
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E712
16 |     assert I.fig.number == 1
   |
   = help: Replace with `not I.fig.get_tight_layout()`

Tests/test_im01_initimage.py:21:5: E741 Ambiguous variable name: `I`
   |
19 | # Test the window number
20 | def test_window_number():
21 |     I = pp.Image(nwin=2)
   |     ^ E741
22 |     assert I.fig.number == 2
   |

Tests/test_im01_initimage.py:27:5: E741 Ambiguous variable name: `I`
   |
25 | # Test the figure size
26 | def test_figsize():
27 |     I = pp.Image(figsize=(6, 7))
   |     ^ E741
28 |     assert I.fig.get_figwidth() == 6.0
29 |     assert I.fig.get_figheight() == 7.0
   |

Tests/test_im01_initimage.py:34:5: E741 Ambiguous variable name: `I`
   |
32 | # Test the suptitle
33 | def test_suptitle():
34 |     I = pp.Image(suptitle="This is a title")
   |     ^ E741
35 |     assert I.fig._suptitle.get_text() == "This is a title"
   |

Tests/test_im01_initimage.py:40:5: E741 Ambiguous variable name: `I`
   |
38 | # Test the fontsize
39 | def test_fontsize():
40 |     I = pp.Image(fontsize=20)
   |     ^ E741
41 |     assert I.fontsize == 20
   |

Tests/test_im01_initimage.py:46:5: E741 Ambiguous variable name: `I`
   |
44 | # Test the tight layout
45 | def test_tight_layout():
46 |     I = pp.Image(tight=False)
   |     ^ E741
47 |     assert I.fig.get_tight_layout() == False
   |

Tests/test_im01_initimage.py:47:12: E712 Avoid equality comparisons to `False`; use `if not I.fig.get_tight_layout():` for false checks
   |
45 | def test_tight_layout():
46 |     I = pp.Image(tight=False)
47 |     assert I.fig.get_tight_layout() == False
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E712
   |
   = help: Replace with `not I.fig.get_tight_layout()`

Tests/test_im02_createaxis.py:1:22: F401 [*] `matplotlib` imported but unused
  |
1 | import matplotlib as mpl
  |                      ^^^ F401
2 | import numpy as np
  |
  = help: Remove unused import: `matplotlib`

Tests/test_im02_createaxis.py:9:5: E741 Ambiguous variable name: `I`
   |
 7 | # Check the default values of the figure created in the __init__
 8 | def test_figure_default_init():
 9 |     I = pp.Image()
   |     ^ E741
10 |     ax = I.create_axes()
11 |     nrow, ncol = I.fig.axes[0].get_subplotspec().get_gridspec().get_geometry()
   |

Tests/test_im02_createaxis.py:10:5: F841 Local variable `ax` is assigned to but never used
   |
 8 | def test_figure_default_init():
 9 |     I = pp.Image()
10 |     ax = I.create_axes()
   |     ^^ F841
11 |     nrow, ncol = I.fig.axes[0].get_subplotspec().get_gridspec().get_geometry()
12 |     assert ncol == 1
   |
   = help: Remove assignment to unused variable `ax`

Tests/test_im02_createaxis.py:18:5: E741 Ambiguous variable name: `I`
   |
16 | # Change number of rows and columns
17 | def test_rows_columns():
18 |     I = pp.Image()
   |     ^ E741
19 |     ax = I.create_axes(ncol=2, nrow=3)
20 |     nrow, ncol = I.fig.axes[0].get_subplotspec().get_gridspec().get_geometry()
   |

Tests/test_im02_createaxis.py:28:5: E741 Ambiguous variable name: `I`
   |
26 | # Add suptitle and change tight layout
27 | def test_suptitle_layout():
28 |     I = pp.Image()
   |     ^ E741
29 |     ax = I.create_axes(ncol=2, nrow=3, suptitle="this is title", tight=False)
30 |     assert I.fig._suptitle.get_text() == "this is title"
   |

Tests/test_im02_createaxis.py:29:5: F841 Local variable `ax` is assigned to but never used
   |
27 | def test_suptitle_layout():
28 |     I = pp.Image()
29 |     ax = I.create_axes(ncol=2, nrow=3, suptitle="this is title", tight=False)
   |     ^^ F841
30 |     assert I.fig._suptitle.get_text() == "this is title"
31 |     assert I.fig.get_tight_layout() == False
   |
   = help: Remove assignment to unused variable `ax`

Tests/test_im02_createaxis.py:31:12: E712 Avoid equality comparisons to `False`; use `if not I.fig.get_tight_layout():` for false checks
   |
29 |     ax = I.create_axes(ncol=2, nrow=3, suptitle="this is title", tight=False)
30 |     assert I.fig._suptitle.get_text() == "this is title"
31 |     assert I.fig.get_tight_layout() == False
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E712
   |
   = help: Replace with `not I.fig.get_tight_layout()`

Tests/test_im02_createaxis.py:36:5: E741 Ambiguous variable name: `I`
   |
34 | # Add different borders to the figure
35 | def test_borders():
36 |     I = pp.Image()
   |     ^ E741
37 |     ax = I.create_axes(left=0.2, right=0.8, top=0.85, bottom=0.05)
38 |     assert I.fig.get_tight_layout() == False
   |

Tests/test_im02_createaxis.py:38:12: E712 Avoid equality comparisons to `False`; use `if not I.fig.get_tight_layout():` for false checks
   |
36 |     I = pp.Image()
37 |     ax = I.create_axes(left=0.2, right=0.8, top=0.85, bottom=0.05)
38 |     assert I.fig.get_tight_layout() == False
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E712
39 |     pos = ax.get_position().bounds
40 |     assert np.isclose(pos[0], 0.2)
   |
   = help: Replace with `not I.fig.get_tight_layout()`

Tests/test_im02_createaxis.py:48:5: E741 Ambiguous variable name: `I`
   |
46 | # Two columns custom
47 | def test_twocolumns():
48 |     I = pp.Image()
   |     ^ E741
49 |     ax = I.create_axes(ncol=2, left=0.15, right=0.8, wspace=0.2, wratio=[2, 1])
50 |     pos = ax[0].get_position().bounds
   |

Tests/test_im02_createaxis.py:60:5: E741 Ambiguous variable name: `I`
   |
58 | # Multiple rows
59 | def test_multiple_row():
60 |     I = pp.Image()
   |     ^ E741
61 |     ax = I.create_axes(ncol=1, nrow=3, hspace=[0.2, 0.1], hratio=[1, 2, 1])
62 |     pos = ax[0].get_position().bounds
   |

Tests/test_im02_createaxis.py:75:5: E741 Ambiguous variable name: `I`
   |
73 | # Multiple rows and columns
74 | def test_multiple_rowcols():
75 |     I = pp.Image()
   |     ^ E741
76 |     ax = I.create_axes(ncol=2, nrow=3, left=0.05, bottom=0.05)
77 |     pos = ax[0].get_position().bounds
   |

Tests/test_im02_createaxis.py:85:5: E741 Ambiguous variable name: `I`
   |
83 | # Suptitle and figsize
84 | def test_size_suptitle():
85 |     I = pp.Image(suptitle="This is a title", figsize=(6, 7))
   |     ^ E741
86 |     assert I.fig._suptitle.get_text() == "This is a title"
87 |     assert I.fig.get_figwidth() == 6
   |

Tests/test_im02_createaxis.py:89:5: F841 Local variable `ax` is assigned to but never used
   |
87 |     assert I.fig.get_figwidth() == 6
88 |     assert I.fig.get_figheight() == 7
89 |     ax = I.create_axes(suptitle="This is another title", figsize=(5, 8))
   |     ^^ F841
90 |     assert I.fig._suptitle.get_text() == "This is another title"
91 |     assert I.fig.get_figwidth() == 5
   |
   = help: Remove assignment to unused variable `ax`

Tests/test_im02_createaxis.py:97:5: E741 Ambiguous variable name: `I`
   |
95 | # Multiple create_axes
96 | def test_multiple_created():
97 |     I = pp.Image()
   |     ^ E741
98 |     ax = I.create_axes(left=0.2, right=0.5)
99 |     ax = I.create_axes(left=0.6, right=0.85)
   |

Tests/test_im03_set_axis.py:1:22: F401 [*] `matplotlib` imported but unused
  |
1 | import matplotlib as mpl
  |                      ^^^ F401
2 | import numpy as np
3 | import numpy.testing as npt
  |
  = help: Remove unused import: `matplotlib`

Tests/test_im03_set_axis.py:10:5: E741 Ambiguous variable name: `I`
   |
 8 | # Check the default values of the set_axes
 9 | def test_setaxis_default():
10 |     I = pp.Image()
   |     ^ E741
11 |     ax = I.create_axes()
12 |     I.set_axis()
   |

Tests/test_im03_set_axis.py:25:30: E711 Comparison to `None` should be `cond is None`
   |
23 |     assert ax.get_xscale() == "linear"
24 |     assert ax.get_yscale() == "linear"
25 |     assert ax.get_alpha() == None
   |                              ^^^^ E711
   |
   = help: Replace with `cond is None`

Tests/test_im03_set_axis.py:30:5: E741 Ambiguous variable name: `I`
   |
28 | # Aspect ratio
29 | def test_aspect_ratio():
30 |     I = pp.Image()
   |     ^ E741
31 |     ax = I.create_axes()
32 |     I.set_axis(aspect="equal", fontsize=20)
   |

Tests/test_im03_set_axis.py:41:5: E741 Ambiguous variable name: `I`
   |
39 | # xrange and yrange
40 | def test_ranges():
41 |     I = pp.Image()
   |     ^ E741
42 |     ax = I.create_axes()
43 |     I.set_axis(xrange=[-1, 1], yrange=[1, 10])
   |

Tests/test_im03_set_axis.py:54:5: E741 Ambiguous variable name: `I`
   |
52 | # labels
53 | def test_labels():
54 |     I = pp.Image()
   |     ^ E741
55 |     ax = I.create_axes()
56 |     I.set_axis(title="this is a title", xtitle="x", ytitle="y")
   |

Tests/test_im03_set_axis.py:64:5: E741 Ambiguous variable name: `I`
   |
62 | # ticks
63 | def test_ticks():
64 |     I = pp.Image()
   |     ^ E741
65 |     ax = I.create_axes()
66 |     I.set_axis(xticks=[0, 0.5, 1], yticks=None)
   |

Tests/test_im03_set_axis.py:78:5: E741 Ambiguous variable name: `I`
   |
76 | # tickslabels
77 | def test_tickslabels():
78 |     I = pp.Image()
   |     ^ E741
79 |     ax = I.create_axes()
80 |     yy = ["a", "b", "c"]
   |

Tests/test_im03_set_axis.py:107:5: E741 Ambiguous variable name: `I`
    |
105 | # scales and alpha
106 | def test_scales_alpha():
107 |     I = pp.Image()
    |     ^ E741
108 |     ax = I.create_axes()
109 |     I.set_axis(xscale="log", yscale="log", alpha=0.5)
    |

Tests/test_im04_plot.py:1:22: F401 [*] `matplotlib` imported but unused
  |
1 | import matplotlib as mpl
  |                      ^^^ F401
2 | import numpy as np
3 | import numpy.testing as npt
  |
  = help: Remove unused import: `matplotlib`

Tests/test_im04_plot.py:14:5: E741 Ambiguous variable name: `I`
   |
12 | # Simple plot without x-values
13 | def test_plot_noxvalues():
14 |     I = pp.Image(withblack=True)
   |     ^ E741
15 |     I.plot(y)
16 |     line = I.ax[0].get_lines()[0]
   |

Tests/test_im04_plot.py:26:5: E741 Ambiguous variable name: `I`
   |
24 | # Simple plot with x-values
25 | def test_easyplot():
26 |     I = pp.Image()
   |     ^ E741
27 |     I.plot(x, y)
28 |     line = I.ax[0].get_lines()[0]
   |

Tests/test_im04_plot.py:35:5: E741 Ambiguous variable name: `I`
   |
33 | # Title and labels
34 | def test_title_labels():
35 |     I = pp.Image()
   |     ^ E741
36 |     I.plot(x, y, title="this is a title", xtitle="x", ytitle="y")
37 |     assert I.ax[0].get_title() == "this is a title"
   |

Tests/test_im04_plot.py:44:5: E741 Ambiguous variable name: `I`
   |
42 | # x range
43 | def test_xrange():
44 |     I = pp.Image()
   |     ^ E741
45 |     I.plot(x, y, title="this is a title", xrange=[0.2, 0.4])
46 |     xlim = I.ax[0].get_xlim()
   |

Tests/test_im04_plot.py:53:5: E741 Ambiguous variable name: `I`
   |
51 | # x range and y range
52 | def test_ranges():
53 |     I = pp.Image()
   |     ^ E741
54 |     I.plot(x, y, title="this is a title", xrange=[0.2, 0.4], yrange=[-1, 0])
55 |     xlim = I.ax[0].get_xlim()
   |

Tests/test_im04_plot.py:65:5: E741 Ambiguous variable name: `I`
   |
63 | # plot from create_axes
64 | def test_create_axes():
65 |     I = pp.Image()
   |     ^ E741
66 |     ax = I.create_axes(ncol=1, nrow=3, hspace=[0.2, 0.1], hratio=[1, 2, 1])
67 |     I.plot(x, y, ax=ax[1])
   |

Tests/test_im04_plot.py:79:5: E741 Ambiguous variable name: `I`
   |
77 | # different line parameters
78 | def test_line_parameters():
79 |     I = pp.Image()
   |     ^ E741
80 |     I.plot(x, y, ls="--", lw=0.5, c="r")
81 |     line = I.ax[0].get_lines()[0]
   |

Tests/test_im04_plot.py:89:5: E741 Ambiguous variable name: `I`
   |
87 | # different marker parameters
88 | def test_markers():
89 |     I = pp.Image()
   |     ^ E741
90 |     I.plot(x, y, marker="o", ms=5.0)
91 |     line = I.ax[0].get_lines()[0]
   |

Tests/test_im04_plot.py:98:5: E741 Ambiguous variable name: `I`
    |
 96 | # multiple lines
 97 | def test_multiple_lines():
 98 |     I = pp.Image()
    |     ^ E741
 99 |     I.plot(x, y)
100 |     I.plot(x, z)
    |

Tests/test_im04_plot.py:111:5: E741 Ambiguous variable name: `I`
    |
109 | # legend
110 | def test_legend():
111 |     I = pp.Image()
    |     ^ E741
112 |     I.plot(x, y, label="rho", legpos=0, legcols=2)
113 |     I.plot(x, z, label="rho")
    |

Tests/test_im05_legend.py:1:22: F401 [*] `matplotlib` imported but unused
  |
1 | import matplotlib as mpl
  |                      ^^^ F401
2 | import numpy as np
  |
  = help: Remove unused import: `matplotlib`

Tests/test_im05_legend.py:13:5: E741 Ambiguous variable name: `I`
   |
11 | # Simple legend with custom label
12 | def test_custo_label():
13 |     I = pp.Image()
   |     ^ E741
14 |     I.plot(x, y)
15 |     I.legend(label=["a"])
   |

Tests/test_im05_legend.py:21:5: E741 Ambiguous variable name: `I`
   |
19 | # Simple legend with custom label and different parameters
20 | def test_custom_params():
21 |     I = pp.Image()
   |     ^ E741
22 |     I.plot(x, y)
23 |     I.plot(x, z)
   |

Tests/test_im05_legend.py:34:5: E741 Ambiguous variable name: `I`
   |
32 | # Simple legend with custom label and different parameters
33 | def test_more_custom_params():
34 |     I = pp.Image()
   |     ^ E741
35 |     I.plot(x, y, label="111")
36 |     I.plot(x, z, label="222")
   |

Tests/test_im06_display.py:3:8: F401 [*] `pytest` imported but unused
  |
1 | import numpy as np
2 | import numpy.testing as npt
3 | import pytest
  |        ^^^^^^ F401
4 |
5 | import pyPLUTO as pp
  |
  = help: Remove unused import: `pytest`

Tests/test_im06_display.py:19:5: E741 Ambiguous variable name: `I`
   |
17 | # Simple plot
18 | def test_simple_display():
19 |     I = pp.Image(withblack=True)
   |     ^ E741
20 |     I.display(var, cpos="right", cmap="magma", x1=x, x2=y)
21 |     pcm = I.ax[0].collections[0]
   |

Tests/test_im06_display.py:23:9: F841 Local variable `yc` is assigned to but never used
   |
21 |     pcm = I.ax[0].collections[0]
22 |     ccd = pcm.get_coordinates()
23 |     xc, yc = ccd[:, :, 0], ccd[:, :, 1]
   |         ^^ F841
24 |     pcm = pcm.get_array()
25 |     npt.assert_array_equal(pcm, var)
   |
   = help: Remove assignment to unused variable `yc`

Tests/test_im08_zoomplot.py:1:22: F401 [*] `matplotlib` imported but unused
  |
1 | import matplotlib as mpl
  |                      ^^^ F401
2 | import numpy as np
3 | import numpy.testing as npt
  |
  = help: Remove unused import: `matplotlib`

Tests/test_im08_zoomplot.py:14:5: E741 Ambiguous variable name: `I`
   |
12 | # Check the default options of the inset zoom
13 | def test_default_zoom():
14 |     I = pp.Image()
   |     ^ E741
15 |     ax = I.create_axes(left=0.2, right=0.8, top=0.85, bottom=0.05)
16 |     I.plot(x, y, ax=ax)
   |

Tests/test_im08_zoomplot.py:40:5: E741 Ambiguous variable name: `I`
   |
38 | # Check the custom position (loc) of the inset zoom
39 | def test_custom_loc():
40 |     I = pp.Image()
   |     ^ E741
41 |     ax = I.create_axes(left=0.2, right=0.8, top=0.85, bottom=0.05)
42 |     I.plot(x, y, ax=ax)
   |

Tests/test_im08_zoomplot.py:59:5: E741 Ambiguous variable name: `I`
   |
57 | # Check the custom position (pos) of the inset zoom
58 | def test_cutom_pos():
59 |     I = pp.Image()
   |     ^ E741
60 |     ax = I.create_axes(left=0.2, right=0.8, top=0.85, bottom=0.05)
61 |     I.plot(x, y, ax=ax)
   |

Tests/test_im08_zoomplot.py:78:5: E741 Ambiguous variable name: `I`
   |
76 | # Check axes properties
77 | def test_axes_properties():
78 |     I = pp.Image()
   |     ^ E741
79 |     ax = I.create_axes(left=0.2, right=0.8, top=0.85, bottom=0.05)
80 |     I.plot(x, y, ax=ax)
   |

Tests/test_im08_zoomplot.py:92:5: E741 Ambiguous variable name: `I`
   |
90 | # Check range properties
91 | def test_range():
92 |     I = pp.Image()
   |     ^ E741
93 |     ax = I.create_axes(left=0.2, right=0.8, top=0.85, bottom=0.05)
94 |     I.plot(x, y, ax=ax)
   |

Tests/test_lf01_loadpath.py:16:9: F841 Local variable `D` is assigned to but never used
   |
14 | def test_wrong_endian():
15 |     with pytest.raises(ValueError):
16 |         D = pp.Load(path=path / "single_file", text=False, endian="wrong")
   |         ^ F841
   |
   = help: Remove assignment to unused variable `D`

Tests/test_lf01_loadpath.py:24:9: F841 Local variable `D` is assigned to but never used
   |
22 |         TypeError, match="Invalid data type. 'multiple' must be a boolean."
23 |     ):
24 |         D = pp.Load(path=path / "single_file", text=False, multiple="wrong")
   |         ^ F841
   |
   = help: Remove assignment to unused variable `D`

Tests/test_lf01_loadpath.py:34:9: F841 Local variable `D` is assigned to but never used
   |
32 |         D = pp.Load(path=123, text=False)
33 |     with pytest.raises(ValueError, match="'path' cannot be an empty string."):
34 |         D = pp.Load(path="", text=False)
   |         ^ F841
   |
   = help: Remove assignment to unused variable `D`

Tests/test_lf01_loadpath.py:40:9: F841 Local variable `D` is assigned to but never used
   |
38 | def test_notadirectory():
39 |     with pytest.raises(NotADirectoryError):
40 |         D = pp.Load(path="wrong", text=False)
   |         ^ F841
   |
   = help: Remove assignment to unused variable `D`

Tests/test_lf01_loadpath.py:47:9: F841 Local variable `res` is assigned to but never used
   |
45 |     with pytest.raises(AttributeError):
46 |         D = pp.Load(path=path / "single_file", text=False)
47 |         res = D.wrong
   |         ^^^ F841
   |
   = help: Remove assignment to unused variable `res`

Tests/test_lf02_loadformat.py:84:9: F841 Local variable `D` is assigned to but never used
   |
82 | def test_wrong_format():
83 |     with pytest.raises(ValueError):
84 |         D = pp.Load(path=path / "single_file", text=False, datatype="wrong")
   |         ^ F841
   |
   = help: Remove assignment to unused variable `D`

Tests/test_lf02_loadformat.py:90:9: F841 Local variable `D` is assigned to but never used
   |
88 | def test_noformat():
89 |     with pytest.raises(FileNotFoundError):
90 |         D = pp.Load(text=False)
   |         ^ F841
   |
   = help: Remove assignment to unused variable `D`

Tests/test_lf02_loadformat.py:96:9: F841 Local variable `D` is assigned to but never used
   |
94 | def test_format_noexists():
95 |     with pytest.raises(FileNotFoundError):
96 |         D = pp.Load(path=path / "multiple_files", text=False, datatype="dbl.h5")
   |         ^ F841
   |
   = help: Remove assignment to unused variable `D`

Tests/test_lf04_loadout.py:6:8: F401 [*] `pytest` imported but unused
  |
4 | import numpy as np
5 | import numpy.testing as npt
6 | import pytest
  |        ^^^^^^ F401
7 |
8 | import pyPLUTO as pp
  |
  = help: Remove unused import: `pytest`

Tests/test_lf05_findfiles.py:6:8: F401 [*] `pytest` imported but unused
  |
4 | import numpy as np
5 | import numpy.testing as npt
6 | import pytest
  |        ^^^^^^ F401
7 |
8 | import pyPLUTO as pp
  |
  = help: Remove unused import: `pytest`

Tests/test_lf05_findfiles.py:66:5: F841 Local variable `endianess` is assigned to but never used
   |
64 |     outlist = np.linspace(0, 4, 5, dtype="int")
65 |     typefile = ["single_file"]
66 |     endianess = ["<"]
   |     ^^^^^^^^^ F841
67 |     binformat = ["<f4"]
68 |     endpath = [".0004.tab"]
   |
   = help: Remove assignment to unused variable `endianess`

Tests/test_lf05_findfiles.py:67:5: F841 Local variable `binformat` is assigned to but never used
   |
65 |     typefile = ["single_file"]
66 |     endianess = ["<"]
67 |     binformat = ["<f4"]
   |     ^^^^^^^^^ F841
68 |     endpath = [".0004.tab"]
69 |     varslist = ["var0", "var1", "var2", "var3", "var4"]
   |
   = help: Remove assignment to unused variable `binformat`

Tests/test_lf06_varsoffset.py:4:17: F401 [*] `numpy` imported but unused
  |
2 | from pathlib import Path
3 |
4 | import numpy as np
  |                 ^^ F401
5 | import numpy.testing as npt
6 | import pytest
  |
  = help: Remove unused import: `numpy`

Tests/test_lf06_varsoffset.py:5:25: F401 [*] `numpy.testing` imported but unused
  |
4 | import numpy as np
5 | import numpy.testing as npt
  |                         ^^^ F401
6 | import pytest
  |
  = help: Remove unused import: `numpy.testing`

Tests/test_lf06_varsoffset.py:6:8: F401 [*] `pytest` imported but unused
  |
4 | import numpy as np
5 | import numpy.testing as npt
6 | import pytest
  |        ^^^^^^ F401
7 |
8 | import pyPLUTO as pp
  |
  = help: Remove unused import: `pytest`

Tests/test_lp01_loadpath.py:16:9: F841 Local variable `D` is assigned to but never used
   |
14 | def test_wrongendian():
15 |     with pytest.raises(ValueError):
16 |         D = pp.LoadPart(path=path, text=False, endian="wrong")
   |         ^ F841
   |
   = help: Remove assignment to unused variable `D`

Tests/test_lp01_loadpath.py:26:9: F841 Local variable `D` is assigned to but never used
   |
24 |         D = pp.LoadPart(path=123, text=False)
25 |     with pytest.raises(ValueError, match="'path' cannot be an empty string."):
26 |         D = pp.LoadPart(path="", text=False)
   |         ^ F841
   |
   = help: Remove assignment to unused variable `D`

Tests/test_lp01_loadpath.py:32:9: F841 Local variable `D` is assigned to but never used
   |
30 | def test_wrongpath():
31 |     with pytest.raises(NotADirectoryError):
32 |         D = pp.LoadPart(path="wrong", text=False)
   |         ^ F841
   |
   = help: Remove assignment to unused variable `D`

Tests/test_lp01_loadpath.py:39:9: F841 Local variable `res` is assigned to but never used
   |
37 |     with pytest.raises(AttributeError):
38 |         D = pp.LoadPart(path=path, text=False)
39 |         res = D.wrong
   |         ^^^ F841
   |
   = help: Remove assignment to unused variable `res`

Tests/test_lp02_loadformat.py:35:9: F841 Local variable `D` is assigned to but never used
   |
33 | def test_wrongformat():
34 |     with pytest.raises(ValueError):
35 |         D = pp.LoadPart(path=path, text=False, datatype="wrong")
   |         ^ F841
   |
   = help: Remove assignment to unused variable `D`

Tests/test_lp02_loadformat.py:41:9: F841 Local variable `D` is assigned to but never used
   |
39 | def test_noformat():
40 |     with pytest.raises(FileNotFoundError):
41 |         D = pp.LoadPart(text=False)
   |         ^ F841
   |
   = help: Remove assignment to unused variable `D`

Tests/test_lp02_loadformat.py:47:9: F841 Local variable `D` is assigned to but never used
   |
45 | def test_nogoodformat():
46 |     with pytest.raises(FileNotFoundError):
47 |         D = pp.LoadPart(path=path / "vtk", text=False, datatype="dbl")
   |         ^ F841
   |
   = help: Remove assignment to unused variable `D`

Tests/test_lp03_findfiles.py:4:17: F401 [*] `numpy` imported but unused
  |
2 | from pathlib import Path
3 |
4 | import numpy as np
  |                 ^^ F401
5 | import numpy.testing as npt
6 | import pytest
  |
  = help: Remove unused import: `numpy`

Tests/test_lp03_findfiles.py:6:8: F401 [*] `pytest` imported but unused
  |
4 | import numpy as np
5 | import numpy.testing as npt
6 | import pytest
  |        ^^^^^^ F401
7 |
8 | import pyPLUTO as pp
  |
  = help: Remove unused import: `pytest`

Tests/test_lp03_findfiles.py:22:5: F841 Local variable `binformat` is assigned to but never used
   |
20 |     typefile = ["single_file"]
21 |     endianess = [">"]
22 |     binformat = [">f4"]
   |     ^^^^^^^^^ F841
23 |     endpath = [".0000.vtk"]
24 |     varslist = ["points", "Identity", "tinj", "Color", "Four-Velocity"]
   |
   = help: Remove assignment to unused variable `binformat`

Tests/test_lp04_varsoffset.py:4:17: F401 [*] `numpy` imported but unused
  |
2 | from pathlib import Path
3 |
4 | import numpy as np
  |                 ^^ F401
5 | import numpy.testing as npt
6 | import pytest
  |
  = help: Remove unused import: `numpy`

Tests/test_lp04_varsoffset.py:5:25: F401 [*] `numpy.testing` imported but unused
  |
4 | import numpy as np
5 | import numpy.testing as npt
  |                         ^^^ F401
6 | import pytest
  |
  = help: Remove unused import: `numpy.testing`

Tests/test_lp04_varsoffset.py:6:8: F401 [*] `pytest` imported but unused
  |
4 | import numpy as np
5 | import numpy.testing as npt
6 | import pytest
  |        ^^^^^^ F401
7 |
8 | import pyPLUTO as pp
  |
  = help: Remove unused import: `pytest`

Tests/test_lp05_readdata.py:6:8: F401 [*] `pytest` imported but unused
  |
4 | import numpy as np
5 | import numpy.testing as npt
6 | import pytest
  |        ^^^^^^ F401
7 |
8 | import pyPLUTO as pp
  |
  = help: Remove unused import: `pytest`

Found 206 errors.
[*] 21 fixable with the `--fix` option (29 hidden fixes can be enabled with the `--unsafe-fixes` option).
